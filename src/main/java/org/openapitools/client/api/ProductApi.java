/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.AttributeValueDelete200Response;
import java.math.BigDecimal;
import org.openapitools.client.model.CartConfigUpdate200Response;
import org.openapitools.client.model.CartValidate200Response;
import org.openapitools.client.model.CategoryAddBatch200Response;
import org.openapitools.client.model.CustomerDelete200Response;
import java.util.*;
import org.openapitools.client.model.ModelResponseProductAttributeList;
import org.openapitools.client.model.ModelResponseProductBrandList;
import org.openapitools.client.model.ModelResponseProductChildItemList;
import org.openapitools.client.model.ModelResponseProductCurrencyList;
import org.openapitools.client.model.ModelResponseProductList;
import org.openapitools.client.model.ModelResponseProductOptionList;
import org.openapitools.client.model.ModelResponseProductReviewList;
import org.openapitools.client.model.ProductAdd;
import org.openapitools.client.model.ProductAdd200Response;
import org.openapitools.client.model.ProductAddBatch;
import org.openapitools.client.model.ProductAttributeValueSet200Response;
import org.openapitools.client.model.ProductAttributeValueUnset200Response;
import org.openapitools.client.model.ProductChildItemFind200Response;
import org.openapitools.client.model.ProductChildItemInfo200Response;
import org.openapitools.client.model.ProductCount200Response;
import org.openapitools.client.model.ProductCurrencyAdd200Response;
import org.openapitools.client.model.ProductDeleteBatch;
import org.openapitools.client.model.ProductFind200Response;
import org.openapitools.client.model.ProductImageAdd;
import org.openapitools.client.model.ProductImageAdd200Response;
import org.openapitools.client.model.ProductImageUpdate200Response;
import org.openapitools.client.model.ProductInfo200Response;
import org.openapitools.client.model.ProductManufacturerAdd200Response;
import org.openapitools.client.model.ProductOptionAdd;
import org.openapitools.client.model.ProductOptionAdd200Response;
import org.openapitools.client.model.ProductOptionAssign200Response;
import org.openapitools.client.model.ProductOptionValueAdd200Response;
import org.openapitools.client.model.ProductOptionValueAssign200Response;
import org.openapitools.client.model.ProductPriceAdd;
import org.openapitools.client.model.ProductPriceUpdate;
import org.openapitools.client.model.ProductTaxAdd;
import org.openapitools.client.model.ProductTaxAdd200Response;
import org.openapitools.client.model.ProductUpdate;
import org.openapitools.client.model.ProductUpdateBatch;
import org.openapitools.client.model.ProductVariantAdd;
import org.openapitools.client.model.ProductVariantAdd200Response;
import org.openapitools.client.model.ProductVariantAddBatch;
import org.openapitools.client.model.ProductVariantCount200Response;
import org.openapitools.client.model.ProductVariantDeleteBatch;
import org.openapitools.client.model.ProductVariantImageAdd;
import org.openapitools.client.model.ProductVariantImageAdd200Response;
import org.openapitools.client.model.ProductVariantList200Response;
import org.openapitools.client.model.ProductVariantPriceAdd;
import org.openapitools.client.model.ProductVariantPriceUpdate;
import org.openapitools.client.model.ProductVariantUpdate;
import org.openapitools.client.model.ProductVariantUpdateBatch;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class ProductApi {
  String basePath = "https://api.api2cart.com/v1.1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * product.add
  * Add new product to store.
   * @param productAdd 
   * @return ProductAdd200Response
  */
  public ProductAdd200Response productAdd (ProductAdd productAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productAdd;
    // verify the required parameter 'productAdd' is set
    if (productAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productAdd' when calling productAdd",
        new ApiException(400, "Missing the required parameter 'productAdd' when calling productAdd"));
    }

    // create path and map variables
    String path = "/product.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductAdd200Response) ApiInvoker.deserialize(localVarResponse, "", ProductAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.add
   * Add new product to store.
   * @param productAdd 
  */
  public void productAdd (ProductAdd productAdd, final Response.Listener<ProductAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productAdd;

    // verify the required parameter 'productAdd' is set
    if (productAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productAdd' when calling productAdd",
        new ApiException(400, "Missing the required parameter 'productAdd' when calling productAdd"));
    }

    // create path and map variables
    String path = "/product.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.add.batch
  * Add new products to the store.
   * @param productAddBatch 
   * @return CategoryAddBatch200Response
  */
  public CategoryAddBatch200Response productAddBatch (ProductAddBatch productAddBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productAddBatch;
    // verify the required parameter 'productAddBatch' is set
    if (productAddBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productAddBatch' when calling productAddBatch",
        new ApiException(400, "Missing the required parameter 'productAddBatch' when calling productAddBatch"));
    }

    // create path and map variables
    String path = "/product.add.batch.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryAddBatch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.add.batch
   * Add new products to the store.
   * @param productAddBatch 
  */
  public void productAddBatch (ProductAddBatch productAddBatch, final Response.Listener<CategoryAddBatch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productAddBatch;

    // verify the required parameter 'productAddBatch' is set
    if (productAddBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productAddBatch' when calling productAddBatch",
        new ApiException(400, "Missing the required parameter 'productAddBatch' when calling productAddBatch"));
    }

    // create path and map variables
    String path = "/product.add.batch.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryAddBatch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.attribute.list
  * Get list of attributes and values.
   * @param productId Retrieves attributes specified by product id
   * @param attributeId Retrieves info for specified attribute_id
   * @param variantId Defines product&#39;s variants specified by variant id
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param attributeGroupId Filter by attribute_group_id
   * @param setName Retrieves attributes specified by set_name in Magento
   * @param langId Retrieves attributes specified by language id
   * @param storeId Retrieves attributes specified by store id
   * @param sortBy Set field to sort by
   * @param sortDirection Set sorting direction
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @return ModelResponseProductAttributeList
  */
  public ModelResponseProductAttributeList productAttributeList (String productId, String attributeId, String variantId, String pageCursor, Integer start, Integer count, String attributeGroupId, String setName, String langId, String storeId, String sortBy, String sortDirection, String params, String responseFields, String exclude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productAttributeList",
        new ApiException(400, "Missing the required parameter 'productId' when calling productAttributeList"));
    }

    // create path and map variables
    String path = "/product.attribute.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "variant_id", variantId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_group_id", attributeGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "set_name", setName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_direction", sortDirection));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseProductAttributeList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseProductAttributeList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.attribute.list
   * Get list of attributes and values.
   * @param productId Retrieves attributes specified by product id   * @param attributeId Retrieves info for specified attribute_id   * @param variantId Defines product&#39;s variants specified by variant id   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param attributeGroupId Filter by attribute_group_id   * @param setName Retrieves attributes specified by set_name in Magento   * @param langId Retrieves attributes specified by language id   * @param storeId Retrieves attributes specified by store id   * @param sortBy Set field to sort by   * @param sortDirection Set sorting direction   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  */
  public void productAttributeList (String productId, String attributeId, String variantId, String pageCursor, Integer start, Integer count, String attributeGroupId, String setName, String langId, String storeId, String sortBy, String sortDirection, String params, String responseFields, String exclude, final Response.Listener<ModelResponseProductAttributeList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productAttributeList",
        new ApiException(400, "Missing the required parameter 'productId' when calling productAttributeList"));
    }

    // create path and map variables
    String path = "/product.attribute.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "variant_id", variantId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_group_id", attributeGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "set_name", setName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_direction", sortDirection));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseProductAttributeList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseProductAttributeList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.attribute.value.set
  * Set attribute value to product.
   * @param productId Defines product id where the attribute should be added
   * @param attributeId Filter by attribute_id
   * @param attributeGroupId Filter by attribute_group_id
   * @param attributeName Define attribute name
   * @param value Define attribute value
   * @param valueId Define attribute value id
   * @param langId Language id
   * @param storeId Store Id
   * @return ProductAttributeValueSet200Response
  */
  public ProductAttributeValueSet200Response productAttributeValueSet (String productId, String attributeId, String attributeGroupId, String attributeName, String value, Integer valueId, String langId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productAttributeValueSet",
        new ApiException(400, "Missing the required parameter 'productId' when calling productAttributeValueSet"));
    }

    // create path and map variables
    String path = "/product.attribute.value.set.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_group_id", attributeGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_name", attributeName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "value", value));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "value_id", valueId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductAttributeValueSet200Response) ApiInvoker.deserialize(localVarResponse, "", ProductAttributeValueSet200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.attribute.value.set
   * Set attribute value to product.
   * @param productId Defines product id where the attribute should be added   * @param attributeId Filter by attribute_id   * @param attributeGroupId Filter by attribute_group_id   * @param attributeName Define attribute name   * @param value Define attribute value   * @param valueId Define attribute value id   * @param langId Language id   * @param storeId Store Id
  */
  public void productAttributeValueSet (String productId, String attributeId, String attributeGroupId, String attributeName, String value, Integer valueId, String langId, String storeId, final Response.Listener<ProductAttributeValueSet200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productAttributeValueSet",
        new ApiException(400, "Missing the required parameter 'productId' when calling productAttributeValueSet"));
    }

    // create path and map variables
    String path = "/product.attribute.value.set.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_group_id", attributeGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_name", attributeName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "value", value));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "value_id", valueId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductAttributeValueSet200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductAttributeValueSet200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.attribute.value.unset
  * Removes attribute value for a product.
   * @param productId Product id
   * @param attributeId Attribute Id
   * @param storeId Store Id
   * @param includeDefault Boolean, whether or not to unset default value of the attribute, if applicable
   * @param reindex Is reindex required
   * @param clearCache Is cache clear required
   * @return ProductAttributeValueUnset200Response
  */
  public ProductAttributeValueUnset200Response productAttributeValueUnset (String productId, String attributeId, String storeId, Boolean includeDefault, Boolean reindex, Boolean clearCache) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productAttributeValueUnset",
        new ApiException(400, "Missing the required parameter 'productId' when calling productAttributeValueUnset"));
    }
    // verify the required parameter 'attributeId' is set
    if (attributeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeId' when calling productAttributeValueUnset",
        new ApiException(400, "Missing the required parameter 'attributeId' when calling productAttributeValueUnset"));
    }

    // create path and map variables
    String path = "/product.attribute.value.unset.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_default", includeDefault));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "reindex", reindex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductAttributeValueUnset200Response) ApiInvoker.deserialize(localVarResponse, "", ProductAttributeValueUnset200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.attribute.value.unset
   * Removes attribute value for a product.
   * @param productId Product id   * @param attributeId Attribute Id   * @param storeId Store Id   * @param includeDefault Boolean, whether or not to unset default value of the attribute, if applicable   * @param reindex Is reindex required   * @param clearCache Is cache clear required
  */
  public void productAttributeValueUnset (String productId, String attributeId, String storeId, Boolean includeDefault, Boolean reindex, Boolean clearCache, final Response.Listener<ProductAttributeValueUnset200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productAttributeValueUnset",
        new ApiException(400, "Missing the required parameter 'productId' when calling productAttributeValueUnset"));
    }
    // verify the required parameter 'attributeId' is set
    if (attributeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeId' when calling productAttributeValueUnset",
        new ApiException(400, "Missing the required parameter 'attributeId' when calling productAttributeValueUnset"));
    }

    // create path and map variables
    String path = "/product.attribute.value.unset.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "include_default", includeDefault));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "reindex", reindex));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductAttributeValueUnset200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductAttributeValueUnset200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.brand.list
  * Get list of brands from your store.
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param brandIds Retrieves brands specified by brand ids
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param storeId Store Id
   * @param langId Language id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param parentId Retrieves brands specified by parent id
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param findWhere Entity search that is specified by the comma-separated unique fields
   * @param findValue Entity search that is specified by some value
   * @return ModelResponseProductBrandList
  */
  public ModelResponseProductBrandList productBrandList (Integer start, Integer count, String pageCursor, String params, String brandIds, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String parentId, String responseFields, String findWhere, String findValue) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/product.brand.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "brand_ids", brandIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseProductBrandList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseProductBrandList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.brand.list
   * Get list of brands from your store.
   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param brandIds Retrieves brands specified by brand ids   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param storeId Store Id   * @param langId Language id   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param parentId Retrieves brands specified by parent id   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param findWhere Entity search that is specified by the comma-separated unique fields   * @param findValue Entity search that is specified by some value
  */
  public void productBrandList (Integer start, Integer count, String pageCursor, String params, String brandIds, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String parentId, String responseFields, String findWhere, String findValue, final Response.Listener<ModelResponseProductBrandList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/product.brand.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "brand_ids", brandIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseProductBrandList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseProductBrandList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.child_item.find
  * Search product child item (bundled item or configurable product variant) in store catalog.
   * @param findValue Entity search that is specified by some value
   * @param findWhere Entity search that is specified by the comma-separated unique fields
   * @param findParams Entity search that is specified by comma-separated parameters
   * @param storeId Store Id
   * @return ProductChildItemFind200Response
  */
  public ProductChildItemFind200Response productChildItemFind (String findValue, String findWhere, String findParams, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/product.child_item.find.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_params", findParams));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductChildItemFind200Response) ApiInvoker.deserialize(localVarResponse, "", ProductChildItemFind200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.child_item.find
   * Search product child item (bundled item or configurable product variant) in store catalog.
   * @param findValue Entity search that is specified by some value   * @param findWhere Entity search that is specified by the comma-separated unique fields   * @param findParams Entity search that is specified by comma-separated parameters   * @param storeId Store Id
  */
  public void productChildItemFind (String findValue, String findWhere, String findParams, String storeId, final Response.Listener<ProductChildItemFind200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/product.child_item.find.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_params", findParams));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductChildItemFind200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductChildItemFind200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.child_item.info
  * Get child for specific product.
   * @param productId Filter by parent product id
   * @param id Entity id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param storeId Store Id
   * @param langId Language id
   * @param currencyId Currency Id
   * @param useLatestApiVersion Use the latest platform API version
   * @return ProductChildItemInfo200Response
  */
  public ProductChildItemInfo200Response productChildItemInfo (String productId, String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, Boolean useLatestApiVersion) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productChildItemInfo",
        new ApiException(400, "Missing the required parameter 'productId' when calling productChildItemInfo"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productChildItemInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling productChildItemInfo"));
    }

    // create path and map variables
    String path = "/product.child_item.info.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductChildItemInfo200Response) ApiInvoker.deserialize(localVarResponse, "", ProductChildItemInfo200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.child_item.info
   * Get child for specific product.
   * @param productId Filter by parent product id   * @param id Entity id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param storeId Store Id   * @param langId Language id   * @param currencyId Currency Id   * @param useLatestApiVersion Use the latest platform API version
  */
  public void productChildItemInfo (String productId, String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, Boolean useLatestApiVersion, final Response.Listener<ProductChildItemInfo200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productChildItemInfo",
        new ApiException(400, "Missing the required parameter 'productId' when calling productChildItemInfo"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productChildItemInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling productChildItemInfo"));
    }

    // create path and map variables
    String path = "/product.child_item.info.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductChildItemInfo200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductChildItemInfo200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.child_item.list
  * Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
   * @param pageCursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param productId Filter by parent product id
   * @param productIds Filter by parent product ids
   * @param sku Filter by products variant&#39;s sku
   * @param storeId Store Id
   * @param langId Language id
   * @param currencyId Currency Id
   * @param availSale Specifies the set of available/not available products for sale
   * @param findValue Entity search that is specified by some value
   * @param findWhere Child products search that is specified by field
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   * @param useLatestApiVersion Use the latest platform API version
   * @param returnGlobal Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned.
   * @return ModelResponseProductChildItemList
  */
  public ModelResponseProductChildItemList productChildItemList (String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String productId, String productIds, String sku, String storeId, String langId, String currencyId, Boolean availSale, String findValue, String findWhere, String reportRequestId, Boolean disableReportCache, Boolean useLatestApiVersion, Boolean returnGlobal) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/product.child_item.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_ids", productIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sku", sku));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_sale", availSale));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_global", returnGlobal));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseProductChildItemList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseProductChildItemList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.child_item.list
   * Get a list of a product&#39;s child items, such as variants or bundle components. The total_count field in the response indicates the total number of items in the context of the current filter.
   * @param pageCursor Used to retrieve products child items via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param productId Filter by parent product id   * @param productIds Filter by parent product ids   * @param sku Filter by products variant&#39;s sku   * @param storeId Store Id   * @param langId Language id   * @param currencyId Currency Id   * @param availSale Specifies the set of available/not available products for sale   * @param findValue Entity search that is specified by some value   * @param findWhere Child products search that is specified by field   * @param reportRequestId Report request id   * @param disableReportCache Disable report cache for current request   * @param useLatestApiVersion Use the latest platform API version   * @param returnGlobal Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned.
  */
  public void productChildItemList (String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String productId, String productIds, String sku, String storeId, String langId, String currencyId, Boolean availSale, String findValue, String findWhere, String reportRequestId, Boolean disableReportCache, Boolean useLatestApiVersion, Boolean returnGlobal, final Response.Listener<ModelResponseProductChildItemList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/product.child_item.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_ids", productIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sku", sku));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_sale", availSale));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_global", returnGlobal));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseProductChildItemList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseProductChildItemList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.count
  * Count products in store.
   * @param categoryId Counts products specified by category id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param availView Specifies the set of visible/invisible products
   * @param availSale Specifies the set of available/not available products for sale
   * @param storeId Counts products specified by store id
   * @param langId Counts products specified by language id
   * @param productIds Counts products specified by product ids
   * @param sinceId Retrieve entities starting from the specified id.
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   * @param brandName Retrieves brands specified by brand name
   * @param productAttributes Defines product attributes
   * @param status Defines product&#39;s status
   * @param type Defines products&#39;s type
   * @param findValue Entity search that is specified by some value
   * @param findWhere Counts products that are searched specified by field
   * @param useLatestApiVersion Use the latest platform API version
   * @param returnGlobal Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned.
   * @param categoriesIds Defines product add that is specified by comma-separated categories id
   * @return ProductCount200Response
  */
  public ProductCount200Response productCount (String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String productIds, String sinceId, String reportRequestId, Boolean disableReportCache, String brandName, List<String> productAttributes, String status, String type, String findValue, String findWhere, Boolean useLatestApiVersion, Boolean returnGlobal, String categoriesIds) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/product.count.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_view", availView));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_sale", availSale));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_ids", productIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "since_id", sinceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "brand_name", brandName));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "product_attributes", productAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_global", returnGlobal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "categories_ids", categoriesIds));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductCount200Response) ApiInvoker.deserialize(localVarResponse, "", ProductCount200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.count
   * Count products in store.
   * @param categoryId Counts products specified by category id   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param availView Specifies the set of visible/invisible products   * @param availSale Specifies the set of available/not available products for sale   * @param storeId Counts products specified by store id   * @param langId Counts products specified by language id   * @param productIds Counts products specified by product ids   * @param sinceId Retrieve entities starting from the specified id.   * @param reportRequestId Report request id   * @param disableReportCache Disable report cache for current request   * @param brandName Retrieves brands specified by brand name   * @param productAttributes Defines product attributes   * @param status Defines product&#39;s status   * @param type Defines products&#39;s type   * @param findValue Entity search that is specified by some value   * @param findWhere Counts products that are searched specified by field   * @param useLatestApiVersion Use the latest platform API version   * @param returnGlobal Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned.   * @param categoriesIds Defines product add that is specified by comma-separated categories id
  */
  public void productCount (String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String productIds, String sinceId, String reportRequestId, Boolean disableReportCache, String brandName, List<String> productAttributes, String status, String type, String findValue, String findWhere, Boolean useLatestApiVersion, Boolean returnGlobal, String categoriesIds, final Response.Listener<ProductCount200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/product.count.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_view", availView));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_sale", availSale));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_ids", productIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "since_id", sinceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "brand_name", brandName));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "product_attributes", productAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_global", returnGlobal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "categories_ids", categoriesIds));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductCount200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductCount200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.currency.add
  * Add currency and/or set default in store
   * @param iso3 Specifies standardized currency code
   * @param rate Defines the numerical identifier against to the major currency
   * @param name Defines currency&#39;s name
   * @param avail Specifies whether the currency is available
   * @param symbolLeft Defines the symbol that is located before the currency
   * @param symbolRight Defines the symbol that is located after the currency
   * @param _default Specifies currency&#39;s default meaning
   * @return ProductCurrencyAdd200Response
  */
  public ProductCurrencyAdd200Response productCurrencyAdd (String iso3, BigDecimal rate, String name, Boolean avail, String symbolLeft, String symbolRight, Boolean _default) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'iso3' is set
    if (iso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'iso3' when calling productCurrencyAdd",
        new ApiException(400, "Missing the required parameter 'iso3' when calling productCurrencyAdd"));
    }
    // verify the required parameter 'rate' is set
    if (rate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rate' when calling productCurrencyAdd",
        new ApiException(400, "Missing the required parameter 'rate' when calling productCurrencyAdd"));
    }

    // create path and map variables
    String path = "/product.currency.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "iso3", iso3));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rate", rate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_left", symbolLeft));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_right", symbolRight));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "default", _default));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductCurrencyAdd200Response) ApiInvoker.deserialize(localVarResponse, "", ProductCurrencyAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.currency.add
   * Add currency and/or set default in store
   * @param iso3 Specifies standardized currency code   * @param rate Defines the numerical identifier against to the major currency   * @param name Defines currency&#39;s name   * @param avail Specifies whether the currency is available   * @param symbolLeft Defines the symbol that is located before the currency   * @param symbolRight Defines the symbol that is located after the currency   * @param _default Specifies currency&#39;s default meaning
  */
  public void productCurrencyAdd (String iso3, BigDecimal rate, String name, Boolean avail, String symbolLeft, String symbolRight, Boolean _default, final Response.Listener<ProductCurrencyAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'iso3' is set
    if (iso3 == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'iso3' when calling productCurrencyAdd",
        new ApiException(400, "Missing the required parameter 'iso3' when calling productCurrencyAdd"));
    }
    // verify the required parameter 'rate' is set
    if (rate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'rate' when calling productCurrencyAdd",
        new ApiException(400, "Missing the required parameter 'rate' when calling productCurrencyAdd"));
    }

    // create path and map variables
    String path = "/product.currency.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "iso3", iso3));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "rate", rate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_left", symbolLeft));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "symbol_right", symbolRight));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "default", _default));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductCurrencyAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductCurrencyAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.currency.list
  * Get list of currencies
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param _default Specifies the set of default/not default currencies
   * @param avail Specifies the set of available/not available currencies
   * @return ModelResponseProductCurrencyList
  */
  public ModelResponseProductCurrencyList productCurrencyList (Integer start, Integer count, String params, String pageCursor, String exclude, String responseFields, Boolean _default, Boolean avail) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/product.currency.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "default", _default));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseProductCurrencyList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseProductCurrencyList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.currency.list
   * Get list of currencies
   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param _default Specifies the set of default/not default currencies   * @param avail Specifies the set of available/not available currencies
  */
  public void productCurrencyList (Integer start, Integer count, String params, String pageCursor, String exclude, String responseFields, Boolean _default, Boolean avail, final Response.Listener<ModelResponseProductCurrencyList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/product.currency.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "default", _default));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseProductCurrencyList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseProductCurrencyList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.delete
  * Product delete
   * @param id Product id that will be removed
   * @param storeId Store Id
   * @return CustomerDelete200Response
  */
  public CustomerDelete200Response productDelete (String id, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productDelete"));
    }

    // create path and map variables
    String path = "/product.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CustomerDelete200Response) ApiInvoker.deserialize(localVarResponse, "", CustomerDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.delete
   * Product delete
   * @param id Product id that will be removed   * @param storeId Store Id
  */
  public void productDelete (String id, String storeId, final Response.Listener<CustomerDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productDelete"));
    }

    // create path and map variables
    String path = "/product.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CustomerDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", CustomerDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.delete.batch
  * Remove product from the store.
   * @param productDeleteBatch 
   * @return CategoryAddBatch200Response
  */
  public CategoryAddBatch200Response productDeleteBatch (ProductDeleteBatch productDeleteBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productDeleteBatch;
    // verify the required parameter 'productDeleteBatch' is set
    if (productDeleteBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productDeleteBatch' when calling productDeleteBatch",
        new ApiException(400, "Missing the required parameter 'productDeleteBatch' when calling productDeleteBatch"));
    }

    // create path and map variables
    String path = "/product.delete.batch.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryAddBatch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.delete.batch
   * Remove product from the store.
   * @param productDeleteBatch 
  */
  public void productDeleteBatch (ProductDeleteBatch productDeleteBatch, final Response.Listener<CategoryAddBatch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productDeleteBatch;

    // verify the required parameter 'productDeleteBatch' is set
    if (productDeleteBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productDeleteBatch' when calling productDeleteBatch",
        new ApiException(400, "Missing the required parameter 'productDeleteBatch' when calling productDeleteBatch"));
    }

    // create path and map variables
    String path = "/product.delete.batch.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryAddBatch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.fields
  * Retrieve all available fields for product item in store.
   * @return CartConfigUpdate200Response
  */
  public CartConfigUpdate200Response productFields () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/product.fields.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CartConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", CartConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.fields
   * Retrieve all available fields for product item in store.

  */
  public void productFields (final Response.Listener<CartConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/product.fields.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CartConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", CartConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.find
  * Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
   * @param findValue Entity search that is specified by some value
   * @param findWhere Entity search that is specified by the comma-separated unique fields
   * @param findParams Entity search that is specified by comma-separated parameters
   * @param findWhat Parameter&#39;s value specifies the entity that has to be found
   * @param langId Search products specified by language id
   * @param storeId Store Id
   * @return ProductFind200Response
  */
  public ProductFind200Response productFind (String findValue, String findWhere, String findParams, String findWhat, String langId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'findValue' is set
    if (findValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'findValue' when calling productFind",
        new ApiException(400, "Missing the required parameter 'findValue' when calling productFind"));
    }

    // create path and map variables
    String path = "/product.find.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_params", findParams));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_what", findWhat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductFind200Response) ApiInvoker.deserialize(localVarResponse, "", ProductFind200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.find
   * Search product in store catalog. \&quot;Apple\&quot; is specified here by default.
   * @param findValue Entity search that is specified by some value   * @param findWhere Entity search that is specified by the comma-separated unique fields   * @param findParams Entity search that is specified by comma-separated parameters   * @param findWhat Parameter&#39;s value specifies the entity that has to be found   * @param langId Search products specified by language id   * @param storeId Store Id
  */
  public void productFind (String findValue, String findWhere, String findParams, String findWhat, String langId, String storeId, final Response.Listener<ProductFind200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'findValue' is set
    if (findValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'findValue' when calling productFind",
        new ApiException(400, "Missing the required parameter 'findValue' when calling productFind"));
    }

    // create path and map variables
    String path = "/product.find.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_params", findParams));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_what", findWhat));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductFind200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductFind200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.image.add
  * Add image to product
   * @param productImageAdd 
   * @return ProductImageAdd200Response
  */
  public ProductImageAdd200Response productImageAdd (ProductImageAdd productImageAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productImageAdd;
    // verify the required parameter 'productImageAdd' is set
    if (productImageAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productImageAdd' when calling productImageAdd",
        new ApiException(400, "Missing the required parameter 'productImageAdd' when calling productImageAdd"));
    }

    // create path and map variables
    String path = "/product.image.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductImageAdd200Response) ApiInvoker.deserialize(localVarResponse, "", ProductImageAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.image.add
   * Add image to product
   * @param productImageAdd 
  */
  public void productImageAdd (ProductImageAdd productImageAdd, final Response.Listener<ProductImageAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productImageAdd;

    // verify the required parameter 'productImageAdd' is set
    if (productImageAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productImageAdd' when calling productImageAdd",
        new ApiException(400, "Missing the required parameter 'productImageAdd' when calling productImageAdd"));
    }

    // create path and map variables
    String path = "/product.image.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductImageAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductImageAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.image.delete
  * Delete image
   * @param productId Defines product id where the image should be deleted
   * @param id Entity id
   * @param storeId Store Id
   * @return AttributeDelete200Response
  */
  public AttributeDelete200Response productImageDelete (String productId, String id, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productImageDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productImageDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productImageDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productImageDelete"));
    }

    // create path and map variables
    String path = "/product.image.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.image.delete
   * Delete image
   * @param productId Defines product id where the image should be deleted   * @param id Entity id   * @param storeId Store Id
  */
  public void productImageDelete (String productId, String id, String storeId, final Response.Listener<AttributeDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productImageDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productImageDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productImageDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productImageDelete"));
    }

    // create path and map variables
    String path = "/product.image.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.image.update
  * Update details of image
   * @param productId Defines product id where the image should be updated
   * @param id Defines image update specified by image id
   * @param variantIds Defines product&#39;s variants ids
   * @param imageName Defines image&#39;s name
   * @param type Defines image&#39;s types that are specified by comma-separated list
   * @param label Defines alternative text that has to be attached to the picture
   * @param position Defines image’s position in the list
   * @param storeId Store Id
   * @param langId Language id
   * @param hidden Define is hide image
   * @return ProductImageUpdate200Response
  */
  public ProductImageUpdate200Response productImageUpdate (String productId, String id, String variantIds, String imageName, String type, String label, Integer position, String storeId, String langId, Boolean hidden) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productImageUpdate",
        new ApiException(400, "Missing the required parameter 'productId' when calling productImageUpdate"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productImageUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling productImageUpdate"));
    }

    // create path and map variables
    String path = "/product.image.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "variant_ids", variantIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "image_name", imageName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "label", label));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "position", position));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hidden", hidden));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductImageUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", ProductImageUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.image.update
   * Update details of image
   * @param productId Defines product id where the image should be updated   * @param id Defines image update specified by image id   * @param variantIds Defines product&#39;s variants ids   * @param imageName Defines image&#39;s name   * @param type Defines image&#39;s types that are specified by comma-separated list   * @param label Defines alternative text that has to be attached to the picture   * @param position Defines image’s position in the list   * @param storeId Store Id   * @param langId Language id   * @param hidden Define is hide image
  */
  public void productImageUpdate (String productId, String id, String variantIds, String imageName, String type, String label, Integer position, String storeId, String langId, Boolean hidden, final Response.Listener<ProductImageUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productImageUpdate",
        new ApiException(400, "Missing the required parameter 'productId' when calling productImageUpdate"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productImageUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling productImageUpdate"));
    }

    // create path and map variables
    String path = "/product.image.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "variant_ids", variantIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "image_name", imageName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "label", label));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "position", position));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hidden", hidden));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductImageUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductImageUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.info
  * Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
   * @param id Retrieves product&#39;s info specified by product id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param storeId Retrieves product info specified by store id
   * @param langId Retrieves product info specified by language id
   * @param currencyId Currency Id
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   * @param useLatestApiVersion Use the latest platform API version
   * @return ProductInfo200Response
  */
  public ProductInfo200Response productInfo (String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, String reportRequestId, Boolean disableReportCache, Boolean useLatestApiVersion) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling productInfo"));
    }

    // create path and map variables
    String path = "/product.info.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductInfo200Response) ApiInvoker.deserialize(localVarResponse, "", ProductInfo200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.info
   * Get information about a specific product by its ID. In the case of a multistore configuration, use the store_id filter to get a response in the context of a specific store.
   * @param id Retrieves product&#39;s info specified by product id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param storeId Retrieves product info specified by store id   * @param langId Retrieves product info specified by language id   * @param currencyId Currency Id   * @param reportRequestId Report request id   * @param disableReportCache Disable report cache for current request   * @param useLatestApiVersion Use the latest platform API version
  */
  public void productInfo (String id, String params, String responseFields, String exclude, String storeId, String langId, String currencyId, String reportRequestId, Boolean disableReportCache, Boolean useLatestApiVersion, final Response.Listener<ProductInfo200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling productInfo"));
    }

    // create path and map variables
    String path = "/product.info.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductInfo200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductInfo200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.list
  * Get list of products from your store. Returns 10 products by default.
   * @param pageCursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param categoryId Retrieves products specified by category id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param availView Specifies the set of visible/invisible products
   * @param availSale Specifies the set of available/not available products for sale
   * @param storeId Retrieves products specified by store id
   * @param langId Retrieves products specified by language id
   * @param currencyId Currency Id
   * @param productIds Retrieves products specified by product ids
   * @param sinceId Retrieve entities starting from the specified id.
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   * @param sortBy Set field to sort by
   * @param sortDirection Set sorting direction
   * @param sku Filter by product&#39;s sku
   * @param disableCache Disable cache for current request
   * @param brandName Retrieves brands specified by brand name
   * @param productAttributes Defines product attributes
   * @param status Defines product&#39;s status
   * @param type Defines products&#39;s type
   * @param findValue Entity search that is specified by some value
   * @param findWhere Product search that is specified by field
   * @param useLatestApiVersion Use the latest platform API version
   * @param returnGlobal Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned.
   * @param categoriesIds Retrieves products specified by categories ids
   * @return ModelResponseProductList
  */
  public ModelResponseProductList productList (String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String currencyId, String productIds, String sinceId, String reportRequestId, Boolean disableReportCache, String sortBy, String sortDirection, String sku, Boolean disableCache, String brandName, List<String> productAttributes, String status, String type, String findValue, String findWhere, Boolean useLatestApiVersion, Boolean returnGlobal, String categoriesIds) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/product.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_view", availView));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_sale", availSale));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_ids", productIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "since_id", sinceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_direction", sortDirection));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sku", sku));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_cache", disableCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "brand_name", brandName));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "product_attributes", productAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_global", returnGlobal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "categories_ids", categoriesIds));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseProductList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseProductList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.list
   * Get list of products from your store. Returns 10 products by default.
   * @param pageCursor Used to retrieve products via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param categoryId Retrieves products specified by category id   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param availView Specifies the set of visible/invisible products   * @param availSale Specifies the set of available/not available products for sale   * @param storeId Retrieves products specified by store id   * @param langId Retrieves products specified by language id   * @param currencyId Currency Id   * @param productIds Retrieves products specified by product ids   * @param sinceId Retrieve entities starting from the specified id.   * @param reportRequestId Report request id   * @param disableReportCache Disable report cache for current request   * @param sortBy Set field to sort by   * @param sortDirection Set sorting direction   * @param sku Filter by product&#39;s sku   * @param disableCache Disable cache for current request   * @param brandName Retrieves brands specified by brand name   * @param productAttributes Defines product attributes   * @param status Defines product&#39;s status   * @param type Defines products&#39;s type   * @param findValue Entity search that is specified by some value   * @param findWhere Product search that is specified by field   * @param useLatestApiVersion Use the latest platform API version   * @param returnGlobal Determines the type of products to be returned. If set to &#39;true&#39;, only global products will be returned; if set to &#39;false&#39;, only local products will be returned.   * @param categoriesIds Retrieves products specified by categories ids
  */
  public void productList (String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String categoryId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean availView, Boolean availSale, String storeId, String langId, String currencyId, String productIds, String sinceId, String reportRequestId, Boolean disableReportCache, String sortBy, String sortDirection, String sku, Boolean disableCache, String brandName, List<String> productAttributes, String status, String type, String findValue, String findWhere, Boolean useLatestApiVersion, Boolean returnGlobal, String categoriesIds, final Response.Listener<ModelResponseProductList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/product.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_view", availView));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail_sale", availSale));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_ids", productIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "since_id", sinceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_direction", sortDirection));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sku", sku));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_cache", disableCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "brand_name", brandName));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "product_attributes", productAttributes));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_global", returnGlobal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "categories_ids", categoriesIds));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseProductList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseProductList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.manufacturer.add
  * Add manufacturer to store and assign to product
   * @param productId Defines products specified by product id
   * @param manufacturer Defines product’s manufacturer&#39;s name
   * @param storeId Store Id
   * @return ProductManufacturerAdd200Response
  */
  public ProductManufacturerAdd200Response productManufacturerAdd (String productId, String manufacturer, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productManufacturerAdd",
        new ApiException(400, "Missing the required parameter 'productId' when calling productManufacturerAdd"));
    }
    // verify the required parameter 'manufacturer' is set
    if (manufacturer == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'manufacturer' when calling productManufacturerAdd",
        new ApiException(400, "Missing the required parameter 'manufacturer' when calling productManufacturerAdd"));
    }

    // create path and map variables
    String path = "/product.manufacturer.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "manufacturer", manufacturer));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductManufacturerAdd200Response) ApiInvoker.deserialize(localVarResponse, "", ProductManufacturerAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.manufacturer.add
   * Add manufacturer to store and assign to product
   * @param productId Defines products specified by product id   * @param manufacturer Defines product’s manufacturer&#39;s name   * @param storeId Store Id
  */
  public void productManufacturerAdd (String productId, String manufacturer, String storeId, final Response.Listener<ProductManufacturerAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productManufacturerAdd",
        new ApiException(400, "Missing the required parameter 'productId' when calling productManufacturerAdd"));
    }
    // verify the required parameter 'manufacturer' is set
    if (manufacturer == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'manufacturer' when calling productManufacturerAdd",
        new ApiException(400, "Missing the required parameter 'manufacturer' when calling productManufacturerAdd"));
    }

    // create path and map variables
    String path = "/product.manufacturer.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "manufacturer", manufacturer));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductManufacturerAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductManufacturerAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.option.add
  * Add product option from store.
   * @param productOptionAdd 
   * @return ProductOptionAdd200Response
  */
  public ProductOptionAdd200Response productOptionAdd (ProductOptionAdd productOptionAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productOptionAdd;
    // verify the required parameter 'productOptionAdd' is set
    if (productOptionAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productOptionAdd' when calling productOptionAdd",
        new ApiException(400, "Missing the required parameter 'productOptionAdd' when calling productOptionAdd"));
    }

    // create path and map variables
    String path = "/product.option.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductOptionAdd200Response) ApiInvoker.deserialize(localVarResponse, "", ProductOptionAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.option.add
   * Add product option from store.
   * @param productOptionAdd 
  */
  public void productOptionAdd (ProductOptionAdd productOptionAdd, final Response.Listener<ProductOptionAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productOptionAdd;

    // verify the required parameter 'productOptionAdd' is set
    if (productOptionAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productOptionAdd' when calling productOptionAdd",
        new ApiException(400, "Missing the required parameter 'productOptionAdd' when calling productOptionAdd"));
    }

    // create path and map variables
    String path = "/product.option.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductOptionAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductOptionAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.option.assign
  * Assign option from product.
   * @param productId Defines product id where the option should be assigned
   * @param optionId Defines option id which has to be assigned
   * @param required Defines if the option is required
   * @param sortOrder Sort number in the list
   * @param optionValues Defines option values that has to be assigned
   * @param clearCache Is cache clear required
   * @return ProductOptionAssign200Response
  */
  public ProductOptionAssign200Response productOptionAssign (String productId, String optionId, Boolean required, Integer sortOrder, String optionValues, Boolean clearCache) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionAssign",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionAssign"));
    }
    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionAssign",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionAssign"));
    }

    // create path and map variables
    String path = "/product.option.assign.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "required", required));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_values", optionValues));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductOptionAssign200Response) ApiInvoker.deserialize(localVarResponse, "", ProductOptionAssign200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.option.assign
   * Assign option from product.
   * @param productId Defines product id where the option should be assigned   * @param optionId Defines option id which has to be assigned   * @param required Defines if the option is required   * @param sortOrder Sort number in the list   * @param optionValues Defines option values that has to be assigned   * @param clearCache Is cache clear required
  */
  public void productOptionAssign (String productId, String optionId, Boolean required, Integer sortOrder, String optionValues, Boolean clearCache, final Response.Listener<ProductOptionAssign200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionAssign",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionAssign"));
    }
    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionAssign",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionAssign"));
    }

    // create path and map variables
    String path = "/product.option.assign.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "required", required));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_values", optionValues));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductOptionAssign200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductOptionAssign200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.option.delete
  * Product option delete.
   * @param optionId Defines option id that should be deleted
   * @param productId Defines product id where the option should be deleted
   * @param storeId Store Id
   * @return AttributeDelete200Response
  */
  public AttributeDelete200Response productOptionDelete (String optionId, String productId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionDelete",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionDelete"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionDelete"));
    }

    // create path and map variables
    String path = "/product.option.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.option.delete
   * Product option delete.
   * @param optionId Defines option id that should be deleted   * @param productId Defines product id where the option should be deleted   * @param storeId Store Id
  */
  public void productOptionDelete (String optionId, String productId, String storeId, final Response.Listener<AttributeDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionDelete",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionDelete"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionDelete"));
    }

    // create path and map variables
    String path = "/product.option.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.option.list
  * Get list of options.
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param productId Retrieves products&#39; options specified by product id
   * @param langId Language id
   * @param storeId Store Id
   * @return ModelResponseProductOptionList
  */
  public ModelResponseProductOptionList productOptionList (Integer start, Integer count, String params, String exclude, String responseFields, String productId, String langId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/product.option.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseProductOptionList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseProductOptionList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.option.list
   * Get list of options.
   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param productId Retrieves products&#39; options specified by product id   * @param langId Language id   * @param storeId Store Id
  */
  public void productOptionList (Integer start, Integer count, String params, String exclude, String responseFields, String productId, String langId, String storeId, final Response.Listener<ModelResponseProductOptionList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/product.option.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseProductOptionList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseProductOptionList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.option.value.add
  * Add product option item from option.
   * @param productId Defines product id where the option value should be added
   * @param optionId Defines option id where the value has to be added
   * @param optionValue Defines option value that has to be added
   * @param sortOrder Sort number in the list
   * @param displayValue Defines the value that will be displayed for the option value
   * @param isDefault Defines as a default
   * @param clearCache Is cache clear required
   * @return ProductOptionValueAdd200Response
  */
  public ProductOptionValueAdd200Response productOptionValueAdd (String productId, String optionId, String optionValue, Integer sortOrder, String displayValue, Boolean isDefault, Boolean clearCache) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionValueAdd",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionValueAdd"));
    }
    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionValueAdd",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionValueAdd"));
    }

    // create path and map variables
    String path = "/product.option.value.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value", optionValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "display_value", displayValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_default", isDefault));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductOptionValueAdd200Response) ApiInvoker.deserialize(localVarResponse, "", ProductOptionValueAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.option.value.add
   * Add product option item from option.
   * @param productId Defines product id where the option value should be added   * @param optionId Defines option id where the value has to be added   * @param optionValue Defines option value that has to be added   * @param sortOrder Sort number in the list   * @param displayValue Defines the value that will be displayed for the option value   * @param isDefault Defines as a default   * @param clearCache Is cache clear required
  */
  public void productOptionValueAdd (String productId, String optionId, String optionValue, Integer sortOrder, String displayValue, Boolean isDefault, Boolean clearCache, final Response.Listener<ProductOptionValueAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionValueAdd",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionValueAdd"));
    }
    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionValueAdd",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionValueAdd"));
    }

    // create path and map variables
    String path = "/product.option.value.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value", optionValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "display_value", displayValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_default", isDefault));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductOptionValueAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductOptionValueAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.option.value.assign
  * Assign product option item from product.
   * @param productOptionId Defines product&#39;s option id where the value has to be assigned
   * @param optionValueId Defines value id that has to be assigned
   * @param clearCache Is cache clear required
   * @return ProductOptionValueAssign200Response
  */
  public ProductOptionValueAssign200Response productOptionValueAssign (Integer productOptionId, String optionValueId, Boolean clearCache) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productOptionId' is set
    if (productOptionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productOptionId' when calling productOptionValueAssign",
        new ApiException(400, "Missing the required parameter 'productOptionId' when calling productOptionValueAssign"));
    }
    // verify the required parameter 'optionValueId' is set
    if (optionValueId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionValueId' when calling productOptionValueAssign",
        new ApiException(400, "Missing the required parameter 'optionValueId' when calling productOptionValueAssign"));
    }

    // create path and map variables
    String path = "/product.option.value.assign.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_option_id", productOptionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value_id", optionValueId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductOptionValueAssign200Response) ApiInvoker.deserialize(localVarResponse, "", ProductOptionValueAssign200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.option.value.assign
   * Assign product option item from product.
   * @param productOptionId Defines product&#39;s option id where the value has to be assigned   * @param optionValueId Defines value id that has to be assigned   * @param clearCache Is cache clear required
  */
  public void productOptionValueAssign (Integer productOptionId, String optionValueId, Boolean clearCache, final Response.Listener<ProductOptionValueAssign200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productOptionId' is set
    if (productOptionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productOptionId' when calling productOptionValueAssign",
        new ApiException(400, "Missing the required parameter 'productOptionId' when calling productOptionValueAssign"));
    }
    // verify the required parameter 'optionValueId' is set
    if (optionValueId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionValueId' when calling productOptionValueAssign",
        new ApiException(400, "Missing the required parameter 'optionValueId' when calling productOptionValueAssign"));
    }

    // create path and map variables
    String path = "/product.option.value.assign.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_option_id", productOptionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value_id", optionValueId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductOptionValueAssign200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductOptionValueAssign200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.option.value.delete
  * Product option value delete.
   * @param optionId Defines option id where the value should be deleted
   * @param optionValueId Defines option value id that should be deleted
   * @param productId Defines product id where the option value should be deleted
   * @param storeId Store Id
   * @return AttributeDelete200Response
  */
  public AttributeDelete200Response productOptionValueDelete (String optionId, String optionValueId, String productId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionValueDelete",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionValueDelete"));
    }
    // verify the required parameter 'optionValueId' is set
    if (optionValueId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionValueId' when calling productOptionValueDelete",
        new ApiException(400, "Missing the required parameter 'optionValueId' when calling productOptionValueDelete"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionValueDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionValueDelete"));
    }

    // create path and map variables
    String path = "/product.option.value.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value_id", optionValueId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.option.value.delete
   * Product option value delete.
   * @param optionId Defines option id where the value should be deleted   * @param optionValueId Defines option value id that should be deleted   * @param productId Defines product id where the option value should be deleted   * @param storeId Store Id
  */
  public void productOptionValueDelete (String optionId, String optionValueId, String productId, String storeId, final Response.Listener<AttributeDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionValueDelete",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionValueDelete"));
    }
    // verify the required parameter 'optionValueId' is set
    if (optionValueId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionValueId' when calling productOptionValueDelete",
        new ApiException(400, "Missing the required parameter 'optionValueId' when calling productOptionValueDelete"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionValueDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionValueDelete"));
    }

    // create path and map variables
    String path = "/product.option.value.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value_id", optionValueId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.option.value.update
  * Update product option item from option.
   * @param productId Defines product id where the option value should be updated
   * @param optionId Defines option id where the value has to be updated
   * @param optionValueId Defines value id that has to be assigned
   * @param optionValue Defines option value that has to be added
   * @param price Defines new product option price
   * @param quantity Defines new products&#39; options quantity
   * @param displayValue Defines the value that will be displayed for the option value
   * @param clearCache Is cache clear required
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response productOptionValueUpdate (String productId, String optionId, String optionValueId, String optionValue, BigDecimal price, BigDecimal quantity, String displayValue, Boolean clearCache) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionValueUpdate",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionValueUpdate"));
    }
    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionValueUpdate",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionValueUpdate"));
    }
    // verify the required parameter 'optionValueId' is set
    if (optionValueId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionValueId' when calling productOptionValueUpdate",
        new ApiException(400, "Missing the required parameter 'optionValueId' when calling productOptionValueUpdate"));
    }

    // create path and map variables
    String path = "/product.option.value.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value_id", optionValueId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value", optionValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "price", price));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "quantity", quantity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "display_value", displayValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.option.value.update
   * Update product option item from option.
   * @param productId Defines product id where the option value should be updated   * @param optionId Defines option id where the value has to be updated   * @param optionValueId Defines value id that has to be assigned   * @param optionValue Defines option value that has to be added   * @param price Defines new product option price   * @param quantity Defines new products&#39; options quantity   * @param displayValue Defines the value that will be displayed for the option value   * @param clearCache Is cache clear required
  */
  public void productOptionValueUpdate (String productId, String optionId, String optionValueId, String optionValue, BigDecimal price, BigDecimal quantity, String displayValue, Boolean clearCache, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productOptionValueUpdate",
        new ApiException(400, "Missing the required parameter 'productId' when calling productOptionValueUpdate"));
    }
    // verify the required parameter 'optionId' is set
    if (optionId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionId' when calling productOptionValueUpdate",
        new ApiException(400, "Missing the required parameter 'optionId' when calling productOptionValueUpdate"));
    }
    // verify the required parameter 'optionValueId' is set
    if (optionValueId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'optionValueId' when calling productOptionValueUpdate",
        new ApiException(400, "Missing the required parameter 'optionValueId' when calling productOptionValueUpdate"));
    }

    // create path and map variables
    String path = "/product.option.value.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_id", optionId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value_id", optionValueId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "option_value", optionValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "price", price));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "quantity", quantity));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "display_value", displayValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "clear_cache", clearCache));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.price.add
  * Add some prices to the product.
   * @param productPriceAdd 
   * @return CartValidate200Response
  */
  public CartValidate200Response productPriceAdd (ProductPriceAdd productPriceAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productPriceAdd;
    // verify the required parameter 'productPriceAdd' is set
    if (productPriceAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productPriceAdd' when calling productPriceAdd",
        new ApiException(400, "Missing the required parameter 'productPriceAdd' when calling productPriceAdd"));
    }

    // create path and map variables
    String path = "/product.price.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CartValidate200Response) ApiInvoker.deserialize(localVarResponse, "", CartValidate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.price.add
   * Add some prices to the product.
   * @param productPriceAdd 
  */
  public void productPriceAdd (ProductPriceAdd productPriceAdd, final Response.Listener<CartValidate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productPriceAdd;

    // verify the required parameter 'productPriceAdd' is set
    if (productPriceAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productPriceAdd' when calling productPriceAdd",
        new ApiException(400, "Missing the required parameter 'productPriceAdd' when calling productPriceAdd"));
    }

    // create path and map variables
    String path = "/product.price.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CartValidate200Response) ApiInvoker.deserialize(localVarResponse,  "", CartValidate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.price.delete
  * Delete some prices of the product
   * @param productId Defines the product where the price has to be deleted
   * @param groupPrices Defines product&#39;s group prices
   * @param storeId Store Id
   * @return AttributeDelete200Response
  */
  public AttributeDelete200Response productPriceDelete (String productId, String groupPrices, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productPriceDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productPriceDelete"));
    }

    // create path and map variables
    String path = "/product.price.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_prices", groupPrices));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.price.delete
   * Delete some prices of the product
   * @param productId Defines the product where the price has to be deleted   * @param groupPrices Defines product&#39;s group prices   * @param storeId Store Id
  */
  public void productPriceDelete (String productId, String groupPrices, String storeId, final Response.Listener<AttributeDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productPriceDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productPriceDelete"));
    }

    // create path and map variables
    String path = "/product.price.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_prices", groupPrices));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.price.update
  * Update some prices of the product.
   * @param productPriceUpdate 
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response productPriceUpdate (ProductPriceUpdate productPriceUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productPriceUpdate;
    // verify the required parameter 'productPriceUpdate' is set
    if (productPriceUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productPriceUpdate' when calling productPriceUpdate",
        new ApiException(400, "Missing the required parameter 'productPriceUpdate' when calling productPriceUpdate"));
    }

    // create path and map variables
    String path = "/product.price.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.price.update
   * Update some prices of the product.
   * @param productPriceUpdate 
  */
  public void productPriceUpdate (ProductPriceUpdate productPriceUpdate, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productPriceUpdate;

    // verify the required parameter 'productPriceUpdate' is set
    if (productPriceUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productPriceUpdate' when calling productPriceUpdate",
        new ApiException(400, "Missing the required parameter 'productPriceUpdate' when calling productPriceUpdate"));
    }

    // create path and map variables
    String path = "/product.price.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.review.list
  * Get reviews of a specific product.
   * @param productId Product id
   * @param start This parameter sets the number from which you want to get entities
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param ids Retrieves reviews specified by ids
   * @param storeId Store Id
   * @param status Defines status
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @return ModelResponseProductReviewList
  */
  public ModelResponseProductReviewList productReviewList (String productId, Integer start, String pageCursor, Integer count, String ids, String storeId, String status, String params, String exclude, String responseFields) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productReviewList",
        new ApiException(400, "Missing the required parameter 'productId' when calling productReviewList"));
    }

    // create path and map variables
    String path = "/product.review.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseProductReviewList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseProductReviewList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.review.list
   * Get reviews of a specific product.
   * @param productId Product id   * @param start This parameter sets the number from which you want to get entities   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param ids Retrieves reviews specified by ids   * @param storeId Store Id   * @param status Defines status   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
  */
  public void productReviewList (String productId, Integer start, String pageCursor, Integer count, String ids, String storeId, String status, String params, String exclude, String responseFields, final Response.Listener<ModelResponseProductReviewList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productReviewList",
        new ApiException(400, "Missing the required parameter 'productId' when calling productReviewList"));
    }

    // create path and map variables
    String path = "/product.review.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "status", status));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseProductReviewList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseProductReviewList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.store.assign
  * Assign product to store
   * @param productId Defines id of the product which should be assigned to a store
   * @param storeId Defines id of the store product should be assigned to
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response productStoreAssign (String productId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productStoreAssign",
        new ApiException(400, "Missing the required parameter 'productId' when calling productStoreAssign"));
    }
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling productStoreAssign",
        new ApiException(400, "Missing the required parameter 'storeId' when calling productStoreAssign"));
    }

    // create path and map variables
    String path = "/product.store.assign.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.store.assign
   * Assign product to store
   * @param productId Defines id of the product which should be assigned to a store   * @param storeId Defines id of the store product should be assigned to
  */
  public void productStoreAssign (String productId, String storeId, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productStoreAssign",
        new ApiException(400, "Missing the required parameter 'productId' when calling productStoreAssign"));
    }
    // verify the required parameter 'storeId' is set
    if (storeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'storeId' when calling productStoreAssign",
        new ApiException(400, "Missing the required parameter 'storeId' when calling productStoreAssign"));
    }

    // create path and map variables
    String path = "/product.store.assign.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.tax.add
  * Add tax class and tax rate to store and assign to product.
   * @param productTaxAdd 
   * @return ProductTaxAdd200Response
  */
  public ProductTaxAdd200Response productTaxAdd (ProductTaxAdd productTaxAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productTaxAdd;
    // verify the required parameter 'productTaxAdd' is set
    if (productTaxAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productTaxAdd' when calling productTaxAdd",
        new ApiException(400, "Missing the required parameter 'productTaxAdd' when calling productTaxAdd"));
    }

    // create path and map variables
    String path = "/product.tax.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductTaxAdd200Response) ApiInvoker.deserialize(localVarResponse, "", ProductTaxAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.tax.add
   * Add tax class and tax rate to store and assign to product.
   * @param productTaxAdd 
  */
  public void productTaxAdd (ProductTaxAdd productTaxAdd, final Response.Listener<ProductTaxAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productTaxAdd;

    // verify the required parameter 'productTaxAdd' is set
    if (productTaxAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productTaxAdd' when calling productTaxAdd",
        new ApiException(400, "Missing the required parameter 'productTaxAdd' when calling productTaxAdd"));
    }

    // create path and map variables
    String path = "/product.tax.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductTaxAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductTaxAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.update
  * This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
   * @param productUpdate 
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response productUpdate (ProductUpdate productUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productUpdate;
    // verify the required parameter 'productUpdate' is set
    if (productUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productUpdate' when calling productUpdate",
        new ApiException(400, "Missing the required parameter 'productUpdate' when calling productUpdate"));
    }

    // create path and map variables
    String path = "/product.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.update
   * This method can be used to update certain product data. The list of supported parameters depends on the specific platform. Please transmit only those parameters that are supported by the particular platform. Please note that to update the product quantity, it is recommended to use relative parameters (increase_quantity or reduce_quantity) to avoid unexpected overwrites on heavily loaded stores.
   * @param productUpdate 
  */
  public void productUpdate (ProductUpdate productUpdate, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productUpdate;

    // verify the required parameter 'productUpdate' is set
    if (productUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productUpdate' when calling productUpdate",
        new ApiException(400, "Missing the required parameter 'productUpdate' when calling productUpdate"));
    }

    // create path and map variables
    String path = "/product.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.update.batch
  * Update products on the store.
   * @param productUpdateBatch 
   * @return CategoryAddBatch200Response
  */
  public CategoryAddBatch200Response productUpdateBatch (ProductUpdateBatch productUpdateBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productUpdateBatch;
    // verify the required parameter 'productUpdateBatch' is set
    if (productUpdateBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productUpdateBatch' when calling productUpdateBatch",
        new ApiException(400, "Missing the required parameter 'productUpdateBatch' when calling productUpdateBatch"));
    }

    // create path and map variables
    String path = "/product.update.batch.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryAddBatch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.update.batch
   * Update products on the store.
   * @param productUpdateBatch 
  */
  public void productUpdateBatch (ProductUpdateBatch productUpdateBatch, final Response.Listener<CategoryAddBatch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productUpdateBatch;

    // verify the required parameter 'productUpdateBatch' is set
    if (productUpdateBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productUpdateBatch' when calling productUpdateBatch",
        new ApiException(400, "Missing the required parameter 'productUpdateBatch' when calling productUpdateBatch"));
    }

    // create path and map variables
    String path = "/product.update.batch.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryAddBatch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.add
  * Add variant to product.
   * @param productVariantAdd 
   * @return ProductVariantAdd200Response
  */
  public ProductVariantAdd200Response productVariantAdd (ProductVariantAdd productVariantAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productVariantAdd;
    // verify the required parameter 'productVariantAdd' is set
    if (productVariantAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantAdd' when calling productVariantAdd",
        new ApiException(400, "Missing the required parameter 'productVariantAdd' when calling productVariantAdd"));
    }

    // create path and map variables
    String path = "/product.variant.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductVariantAdd200Response) ApiInvoker.deserialize(localVarResponse, "", ProductVariantAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.add
   * Add variant to product.
   * @param productVariantAdd 
  */
  public void productVariantAdd (ProductVariantAdd productVariantAdd, final Response.Listener<ProductVariantAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productVariantAdd;

    // verify the required parameter 'productVariantAdd' is set
    if (productVariantAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantAdd' when calling productVariantAdd",
        new ApiException(400, "Missing the required parameter 'productVariantAdd' when calling productVariantAdd"));
    }

    // create path and map variables
    String path = "/product.variant.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductVariantAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductVariantAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.add.batch
  * Add new product variants to the store.
   * @param productVariantAddBatch 
   * @return CategoryAddBatch200Response
  */
  public CategoryAddBatch200Response productVariantAddBatch (ProductVariantAddBatch productVariantAddBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productVariantAddBatch;
    // verify the required parameter 'productVariantAddBatch' is set
    if (productVariantAddBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantAddBatch' when calling productVariantAddBatch",
        new ApiException(400, "Missing the required parameter 'productVariantAddBatch' when calling productVariantAddBatch"));
    }

    // create path and map variables
    String path = "/product.variant.add.batch.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryAddBatch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.add.batch
   * Add new product variants to the store.
   * @param productVariantAddBatch 
  */
  public void productVariantAddBatch (ProductVariantAddBatch productVariantAddBatch, final Response.Listener<CategoryAddBatch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productVariantAddBatch;

    // verify the required parameter 'productVariantAddBatch' is set
    if (productVariantAddBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantAddBatch' when calling productVariantAddBatch",
        new ApiException(400, "Missing the required parameter 'productVariantAddBatch' when calling productVariantAddBatch"));
    }

    // create path and map variables
    String path = "/product.variant.add.batch.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryAddBatch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.count
  * Get count variants.
   * @param productId Retrieves products&#39; variants specified by product id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param categoryId Counts products’ variants specified by category id
   * @param storeId Retrieves variants specified by store id
   * @return ProductVariantCount200Response
  */
  public ProductVariantCount200Response productVariantCount (String productId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productVariantCount",
        new ApiException(400, "Missing the required parameter 'productId' when calling productVariantCount"));
    }

    // create path and map variables
    String path = "/product.variant.count.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductVariantCount200Response) ApiInvoker.deserialize(localVarResponse, "", ProductVariantCount200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.count
   * Get count variants.
   * @param productId Retrieves products&#39; variants specified by product id   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param categoryId Counts products’ variants specified by category id   * @param storeId Retrieves variants specified by store id
  */
  public void productVariantCount (String productId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String storeId, final Response.Listener<ProductVariantCount200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productVariantCount",
        new ApiException(400, "Missing the required parameter 'productId' when calling productVariantCount"));
    }

    // create path and map variables
    String path = "/product.variant.count.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductVariantCount200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductVariantCount200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.delete
  * Delete variant.
   * @param id Defines variant removal, specified by variant id
   * @param productId Defines product&#39;s id where the variant has to be deleted
   * @param storeId Store Id
   * @return AttributeValueDelete200Response
  */
  public AttributeValueDelete200Response productVariantDelete (String id, String productId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productVariantDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productVariantDelete"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productVariantDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productVariantDelete"));
    }

    // create path and map variables
    String path = "/product.variant.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeValueDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeValueDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.delete
   * Delete variant.
   * @param id Defines variant removal, specified by variant id   * @param productId Defines product&#39;s id where the variant has to be deleted   * @param storeId Store Id
  */
  public void productVariantDelete (String id, String productId, String storeId, final Response.Listener<AttributeValueDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productVariantDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productVariantDelete"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productVariantDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productVariantDelete"));
    }

    // create path and map variables
    String path = "/product.variant.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeValueDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeValueDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.delete.batch
  * Remove product variants from the store.
   * @param productVariantDeleteBatch 
   * @return CategoryAddBatch200Response
  */
  public CategoryAddBatch200Response productVariantDeleteBatch (ProductVariantDeleteBatch productVariantDeleteBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productVariantDeleteBatch;
    // verify the required parameter 'productVariantDeleteBatch' is set
    if (productVariantDeleteBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantDeleteBatch' when calling productVariantDeleteBatch",
        new ApiException(400, "Missing the required parameter 'productVariantDeleteBatch' when calling productVariantDeleteBatch"));
    }

    // create path and map variables
    String path = "/product.variant.delete.batch.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryAddBatch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.delete.batch
   * Remove product variants from the store.
   * @param productVariantDeleteBatch 
  */
  public void productVariantDeleteBatch (ProductVariantDeleteBatch productVariantDeleteBatch, final Response.Listener<CategoryAddBatch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productVariantDeleteBatch;

    // verify the required parameter 'productVariantDeleteBatch' is set
    if (productVariantDeleteBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantDeleteBatch' when calling productVariantDeleteBatch",
        new ApiException(400, "Missing the required parameter 'productVariantDeleteBatch' when calling productVariantDeleteBatch"));
    }

    // create path and map variables
    String path = "/product.variant.delete.batch.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryAddBatch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.image.add
  * Add image to product
   * @param productVariantImageAdd 
   * @return ProductVariantImageAdd200Response
  */
  public ProductVariantImageAdd200Response productVariantImageAdd (ProductVariantImageAdd productVariantImageAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productVariantImageAdd;
    // verify the required parameter 'productVariantImageAdd' is set
    if (productVariantImageAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantImageAdd' when calling productVariantImageAdd",
        new ApiException(400, "Missing the required parameter 'productVariantImageAdd' when calling productVariantImageAdd"));
    }

    // create path and map variables
    String path = "/product.variant.image.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductVariantImageAdd200Response) ApiInvoker.deserialize(localVarResponse, "", ProductVariantImageAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.image.add
   * Add image to product
   * @param productVariantImageAdd 
  */
  public void productVariantImageAdd (ProductVariantImageAdd productVariantImageAdd, final Response.Listener<ProductVariantImageAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productVariantImageAdd;

    // verify the required parameter 'productVariantImageAdd' is set
    if (productVariantImageAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantImageAdd' when calling productVariantImageAdd",
        new ApiException(400, "Missing the required parameter 'productVariantImageAdd' when calling productVariantImageAdd"));
    }

    // create path and map variables
    String path = "/product.variant.image.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductVariantImageAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductVariantImageAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.image.delete
  * Delete  image to product
   * @param productId Defines product id where the variant image should be deleted
   * @param productVariantId Defines product&#39;s variants specified by variant id
   * @param id Entity id
   * @param storeId Store Id
   * @return AttributeDelete200Response
  */
  public AttributeDelete200Response productVariantImageDelete (String productId, String productVariantId, String id, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productVariantImageDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productVariantImageDelete"));
    }
    // verify the required parameter 'productVariantId' is set
    if (productVariantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantId' when calling productVariantImageDelete",
        new ApiException(400, "Missing the required parameter 'productVariantId' when calling productVariantImageDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productVariantImageDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productVariantImageDelete"));
    }

    // create path and map variables
    String path = "/product.variant.image.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_variant_id", productVariantId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.image.delete
   * Delete  image to product
   * @param productId Defines product id where the variant image should be deleted   * @param productVariantId Defines product&#39;s variants specified by variant id   * @param id Entity id   * @param storeId Store Id
  */
  public void productVariantImageDelete (String productId, String productVariantId, String id, String storeId, final Response.Listener<AttributeDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productVariantImageDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productVariantImageDelete"));
    }
    // verify the required parameter 'productVariantId' is set
    if (productVariantId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantId' when calling productVariantImageDelete",
        new ApiException(400, "Missing the required parameter 'productVariantId' when calling productVariantImageDelete"));
    }
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productVariantImageDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productVariantImageDelete"));
    }

    // create path and map variables
    String path = "/product.variant.image.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_variant_id", productVariantId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.info
  * Get variant info. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.info\&quot; instead.
   * @param id Retrieves variant&#39;s info specified by variant id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param storeId Retrieves variant info specified by store id
   * @return ProductInfo200Response
  */
  public ProductInfo200Response productVariantInfo (String id, String params, String exclude, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productVariantInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling productVariantInfo"));
    }

    // create path and map variables
    String path = "/product.variant.info.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductInfo200Response) ApiInvoker.deserialize(localVarResponse, "", ProductInfo200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.info
   * Get variant info. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.info\&quot; instead.
   * @param id Retrieves variant&#39;s info specified by variant id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param storeId Retrieves variant info specified by store id
  */
  public void productVariantInfo (String id, String params, String exclude, String storeId, final Response.Listener<ProductInfo200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productVariantInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling productVariantInfo"));
    }

    // create path and map variables
    String path = "/product.variant.info.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductInfo200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductInfo200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.list
  * Get a list of variants. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.list\&quot; instead.
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param categoryId Retrieves products’ variants specified by category id
   * @param productId Retrieves products&#39; variants specified by product id
   * @param storeId Retrieves variants specified by store id
   * @return ProductVariantList200Response
  */
  public ProductVariantList200Response productVariantList (Integer start, Integer count, String params, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String productId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/product.variant.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ProductVariantList200Response) ApiInvoker.deserialize(localVarResponse, "", ProductVariantList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.list
   * Get a list of variants. This method is deprecated, and its development is stopped. Please use \&quot;product.child_item.list\&quot; instead.
   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param categoryId Retrieves products’ variants specified by category id   * @param productId Retrieves products&#39; variants specified by product id   * @param storeId Retrieves variants specified by store id
  */
  public void productVariantList (Integer start, Integer count, String params, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String categoryId, String productId, String storeId, final Response.Listener<ProductVariantList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/product.variant.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ProductVariantList200Response) ApiInvoker.deserialize(localVarResponse,  "", ProductVariantList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.price.add
  * Add some prices to the product variant.
   * @param productVariantPriceAdd 
   * @return CartValidate200Response
  */
  public CartValidate200Response productVariantPriceAdd (ProductVariantPriceAdd productVariantPriceAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productVariantPriceAdd;
    // verify the required parameter 'productVariantPriceAdd' is set
    if (productVariantPriceAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantPriceAdd' when calling productVariantPriceAdd",
        new ApiException(400, "Missing the required parameter 'productVariantPriceAdd' when calling productVariantPriceAdd"));
    }

    // create path and map variables
    String path = "/product.variant.price.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CartValidate200Response) ApiInvoker.deserialize(localVarResponse, "", CartValidate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.price.add
   * Add some prices to the product variant.
   * @param productVariantPriceAdd 
  */
  public void productVariantPriceAdd (ProductVariantPriceAdd productVariantPriceAdd, final Response.Listener<CartValidate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productVariantPriceAdd;

    // verify the required parameter 'productVariantPriceAdd' is set
    if (productVariantPriceAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantPriceAdd' when calling productVariantPriceAdd",
        new ApiException(400, "Missing the required parameter 'productVariantPriceAdd' when calling productVariantPriceAdd"));
    }

    // create path and map variables
    String path = "/product.variant.price.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CartValidate200Response) ApiInvoker.deserialize(localVarResponse,  "", CartValidate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.price.delete
  * Delete some prices of the product variant.
   * @param id Defines the variant where the price has to be deleted
   * @param productId Product id
   * @param groupPrices Defines variants&#39;s group prices
   * @param storeId Store Id
   * @return AttributeDelete200Response
  */
  public AttributeDelete200Response productVariantPriceDelete (String id, String productId, String groupPrices, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productVariantPriceDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productVariantPriceDelete"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productVariantPriceDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productVariantPriceDelete"));
    }
    // verify the required parameter 'groupPrices' is set
    if (groupPrices == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupPrices' when calling productVariantPriceDelete",
        new ApiException(400, "Missing the required parameter 'groupPrices' when calling productVariantPriceDelete"));
    }

    // create path and map variables
    String path = "/product.variant.price.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_prices", groupPrices));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.price.delete
   * Delete some prices of the product variant.
   * @param id Defines the variant where the price has to be deleted   * @param productId Product id   * @param groupPrices Defines variants&#39;s group prices   * @param storeId Store Id
  */
  public void productVariantPriceDelete (String id, String productId, String groupPrices, String storeId, final Response.Listener<AttributeDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling productVariantPriceDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling productVariantPriceDelete"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling productVariantPriceDelete",
        new ApiException(400, "Missing the required parameter 'productId' when calling productVariantPriceDelete"));
    }
    // verify the required parameter 'groupPrices' is set
    if (groupPrices == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupPrices' when calling productVariantPriceDelete",
        new ApiException(400, "Missing the required parameter 'groupPrices' when calling productVariantPriceDelete"));
    }

    // create path and map variables
    String path = "/product.variant.price.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_prices", groupPrices));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.price.update
  * Update some prices of the product variant.
   * @param productVariantPriceUpdate 
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response productVariantPriceUpdate (ProductVariantPriceUpdate productVariantPriceUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productVariantPriceUpdate;
    // verify the required parameter 'productVariantPriceUpdate' is set
    if (productVariantPriceUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantPriceUpdate' when calling productVariantPriceUpdate",
        new ApiException(400, "Missing the required parameter 'productVariantPriceUpdate' when calling productVariantPriceUpdate"));
    }

    // create path and map variables
    String path = "/product.variant.price.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.price.update
   * Update some prices of the product variant.
   * @param productVariantPriceUpdate 
  */
  public void productVariantPriceUpdate (ProductVariantPriceUpdate productVariantPriceUpdate, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productVariantPriceUpdate;

    // verify the required parameter 'productVariantPriceUpdate' is set
    if (productVariantPriceUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantPriceUpdate' when calling productVariantPriceUpdate",
        new ApiException(400, "Missing the required parameter 'productVariantPriceUpdate' when calling productVariantPriceUpdate"));
    }

    // create path and map variables
    String path = "/product.variant.price.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.update
  * Update variant.
   * @param productVariantUpdate 
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response productVariantUpdate (ProductVariantUpdate productVariantUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productVariantUpdate;
    // verify the required parameter 'productVariantUpdate' is set
    if (productVariantUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantUpdate' when calling productVariantUpdate",
        new ApiException(400, "Missing the required parameter 'productVariantUpdate' when calling productVariantUpdate"));
    }

    // create path and map variables
    String path = "/product.variant.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.update
   * Update variant.
   * @param productVariantUpdate 
  */
  public void productVariantUpdate (ProductVariantUpdate productVariantUpdate, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productVariantUpdate;

    // verify the required parameter 'productVariantUpdate' is set
    if (productVariantUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantUpdate' when calling productVariantUpdate",
        new ApiException(400, "Missing the required parameter 'productVariantUpdate' when calling productVariantUpdate"));
    }

    // create path and map variables
    String path = "/product.variant.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * product.variant.update.batch
  * Update products variants on the store.
   * @param productVariantUpdateBatch 
   * @return CategoryAddBatch200Response
  */
  public CategoryAddBatch200Response productVariantUpdateBatch (ProductVariantUpdateBatch productVariantUpdateBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = productVariantUpdateBatch;
    // verify the required parameter 'productVariantUpdateBatch' is set
    if (productVariantUpdateBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantUpdateBatch' when calling productVariantUpdateBatch",
        new ApiException(400, "Missing the required parameter 'productVariantUpdateBatch' when calling productVariantUpdateBatch"));
    }

    // create path and map variables
    String path = "/product.variant.update.batch.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryAddBatch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * product.variant.update.batch
   * Update products variants on the store.
   * @param productVariantUpdateBatch 
  */
  public void productVariantUpdateBatch (ProductVariantUpdateBatch productVariantUpdateBatch, final Response.Listener<CategoryAddBatch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = productVariantUpdateBatch;

    // verify the required parameter 'productVariantUpdateBatch' is set
    if (productVariantUpdateBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productVariantUpdateBatch' when calling productVariantUpdateBatch",
        new ApiException(400, "Missing the required parameter 'productVariantUpdateBatch' when calling productVariantUpdateBatch"));
    }

    // create path and map variables
    String path = "/product.variant.update.batch.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryAddBatch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
