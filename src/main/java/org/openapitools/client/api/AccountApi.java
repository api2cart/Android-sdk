/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AccountCartAdd;
import org.openapitools.client.model.AccountCartAdd200Response;
import org.openapitools.client.model.AccountCartList200Response;
import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.AccountFailedWebhooks200Response;
import org.openapitools.client.model.AccountSupportedPlatforms200Response;
import java.util.*;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AccountApi {
  String basePath = "https://api.api2cart.local.com/v1.1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * account.cart.add
  * Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
   * @param accountCartAdd 
   * @return AccountCartAdd200Response
  */
  public AccountCartAdd200Response accountCartAdd (AccountCartAdd accountCartAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = accountCartAdd;
    // verify the required parameter 'accountCartAdd' is set
    if (accountCartAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountCartAdd' when calling accountCartAdd",
        new ApiException(400, "Missing the required parameter 'accountCartAdd' when calling accountCartAdd"));
    }

    // create path and map variables
    String path = "/account.cart.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountCartAdd200Response) ApiInvoker.deserialize(localVarResponse, "", AccountCartAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * account.cart.add
   * Use this method to automate the process of connecting stores to API2Cart. The list of parameters will vary depending on the platform. To get a list of parameters that are specific to a particular shopping platform, you need to execute the account.supported_platforms.json method.
   * @param accountCartAdd 
  */
  public void accountCartAdd (AccountCartAdd accountCartAdd, final Response.Listener<AccountCartAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = accountCartAdd;

    // verify the required parameter 'accountCartAdd' is set
    if (accountCartAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'accountCartAdd' when calling accountCartAdd",
        new ApiException(400, "Missing the required parameter 'accountCartAdd' when calling accountCartAdd"));
    }

    // create path and map variables
    String path = "/account.cart.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountCartAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountCartAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * account.cart.list
  * This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
   * @param storeUrl A web address of a store
   * @param storeKey Find store by store key
   * @param requestFromDate Retrieve entities from their creation date
   * @param requestToDate Retrieve entities to their creation date
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @return AccountCartList200Response
  */
  public AccountCartList200Response accountCartList (String storeUrl, String storeKey, String requestFromDate, String requestToDate, String params, String exclude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/account.cart.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_url", storeUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_key", storeKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "request_from_date", requestFromDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "request_to_date", requestToDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountCartList200Response) ApiInvoker.deserialize(localVarResponse, "", AccountCartList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * account.cart.list
   * This method lets you get a list of online stores connected to your API2Cart account. You can get the number of API requests to each store if you specify a period using parameters (request_from_date, request_to_date). The total_calls field is displayed only if there are parameters (request_from_date, request_to_date).
   * @param storeUrl A web address of a store   * @param storeKey Find store by store key   * @param requestFromDate Retrieve entities from their creation date   * @param requestToDate Retrieve entities to their creation date   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  */
  public void accountCartList (String storeUrl, String storeKey, String requestFromDate, String requestToDate, String params, String exclude, final Response.Listener<AccountCartList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/account.cart.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_url", storeUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_key", storeKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "request_from_date", requestFromDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "request_to_date", requestToDate));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountCartList200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountCartList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * account.config.update
  * Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
   * @param replaceParameters Identifies if there is a necessity to replace parameters
   * @param newStoreUrl The web address of the store you want to update to connect to API2Cart
   * @param newStoreKey Update store key
   * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)
   * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)
   * @param dbTablesPrefix DB tables prefix
   * @param userAgent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values.
   * @param _3dcartPrivateKey 3DCart Private Key
   * @param _3dcartAccessToken 3DCart Token
   * @param _3dcartapiApiKey 3DCart API Key
   * @param amazonSpClientId Amazon SP API app client id
   * @param amazonSpClientSecret Amazon SP API app client secret
   * @param amazonSpRefreshToken Amazon SP API OAuth refresh token
   * @param amazonSpAwsRegion Amazon AWS Region
   * @param amazonSpApiEnvironment Amazon SP API environment
   * @param amazonSellerId Amazon Seller ID (Merchant token)
   * @param aspdotnetstorefrontApiUser It&#39;s a AspDotNetStorefront account for which API is available
   * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password
   * @param bigcommerceapiAdminAccount It&#39;s a BigCommerce account for which API is enabled
   * @param bigcommerceapiApiPath BigCommerce API URL
   * @param bigcommerceapiApiKey Bigcommerce API Key
   * @param bigcommerceapiClientId Client ID of the requesting app
   * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user
   * @param bigcommerceapiContext API Path section unique to the store
   * @param bolApiKey Bol API Key
   * @param bolApiSecret Bol API Secret
   * @param bolRetailerId Bol Retailer ID
   * @param demandwareClientId Demandware client id
   * @param demandwareApiPassword Demandware api password
   * @param demandwareUserName Demandware user name
   * @param demandwareUserPassword Demandware user password
   * @param ebayClientId Application ID (AppID).
   * @param ebayClientSecret Shared Secret from eBay application
   * @param ebayRuname The RuName value that eBay assigns to your application.
   * @param ebayAccessToken Used to authenticate API requests.
   * @param ebayRefreshToken Used to renew the access token.
   * @param ebayEnvironment eBay environment
   * @param ebaySiteId eBay global ID
   * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user
   * @param ecwidStoreId Store Id
   * @param lazadaAppId Lazada App ID
   * @param lazadaAppSecret Lazada App Secret
   * @param lazadaRefreshToken Lazada Refresh Token
   * @param lazadaRegion Lazada API endpoint Region
   * @param etsyKeystring Etsy keystring
   * @param etsySharedSecret Etsy shared secret
   * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user
   * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user
   * @param etsyClientId Etsy Client Id
   * @param etsyRefreshToken Etsy Refresh token
   * @param facebookAppId Facebook App ID
   * @param facebookAppSecret Facebook App Secret
   * @param facebookAccessToken Facebook Access Token
   * @param facebookBusinessId Facebook Business ID
   * @param netoApiKey Neto API Key
   * @param netoApiUsername Neto User Name
   * @param shoplineAccessToken Shopline APP Key
   * @param shoplineAppKey Shopline APP Key
   * @param shoplineAppSecret Shopline App Secret
   * @param shoplineSharedSecret Shopline Shared Secret
   * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user
   * @param shopifyApiKey Shopify API Key
   * @param shopifyApiPassword Shopify API Password
   * @param shopifySharedSecret Shared secret
   * @param shopeePartnerId Shopee Partner ID
   * @param shopeePartnerKey Shopee Partner Key
   * @param shopeeShopId Shopee SHOP ID
   * @param shopeeRefreshToken Shopee Refresh Token
   * @param shopeeRegion Shopee API endpoint Region. Use for Chinese Mainland or Brazil.
   * @param shopeeEnvironment Shopee Environment
   * @param shoplazzaAccessToken Access token authorizing the app to access resources on behalf of a user
   * @param shoplazzaSharedSecret Shared secret
   * @param mivaAccessToken Miva access token
   * @param mivaSignature Miva signature
   * @param shopwareAccessKey Shopware access key
   * @param unasApiKey UNAS API Key
   * @param shopwareApiKey Shopware api key
   * @param shopwareApiSecret Shopware client secret access key
   * @param bigcartelUserName Subdomain of store
   * @param bigcartelPassword BigCartel account password
   * @param bricklinkConsumerKey Bricklink Consumer Key
   * @param bricklinkConsumerSecret Bricklink Consumer Secret
   * @param bricklinkToken Bricklink Access Token
   * @param bricklinkTokenSecret Bricklink Access Token Secret
   * @param volusionLogin It&#39;s a Volusion account for which API is enabled
   * @param volusionPassword Volusion API Password
   * @param walmartClientId Walmart client ID. For the region &#39;ca&#39; use Consumer ID
   * @param walmartClientSecret Walmart client secret. For the region &#39;ca&#39; use Private Key
   * @param walmartEnvironment Walmart environment
   * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header
   * @param walmartRegion Walmart region
   * @param squareClientId Square (Weebly) Client ID
   * @param squareClientSecret Square (Weebly) Client Secret
   * @param squareRefreshToken Square (Weebly) Refresh Token
   * @param squarespaceApiKey Squarespace API Key
   * @param squarespaceClientId Squarespace Connector Client ID
   * @param squarespaceClientSecret Squarespace Connector Client Secret
   * @param squarespaceAccessToken Squarespace access token
   * @param squarespaceRefreshToken Squarespace refresh token
   * @param hybrisClientId Omni Commerce Connector Client ID
   * @param hybrisClientSecret Omni Commerce Connector Client Secret
   * @param hybrisUsername User Name
   * @param hybrisPassword User password
   * @param hybrisWebsites Websites to stores mapping data
   * @param lightspeedApiKey LightSpeed api key
   * @param lightspeedApiSecret LightSpeed api secret
   * @param commercehqApiKey CommerceHQ api key
   * @param commercehqApiPassword CommerceHQ api password
   * @param wcConsumerKey Woocommerce consumer key
   * @param wcConsumerSecret Woocommerce consumer secret
   * @param magentoConsumerKey Magento Consumer Key
   * @param magentoConsumerSecret Magento Consumer Secret
   * @param magentoAccessToken Magento Access Token
   * @param magentoTokenSecret Magento Token Secret
   * @param prestashopWebserviceKey Prestashop webservice key
   * @param wixAppId Wix App ID
   * @param wixAppSecretKey Wix App Secret Key
   * @param wixInstanceId Wix Instance ID
   * @param wixRefreshToken Wix refresh token
   * @param mercadoLibreAppId Mercado Libre App ID
   * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key
   * @param mercadoLibreRefreshToken Mercado Libre Refresh Token
   * @param zidClientId Zid Client ID
   * @param zidClientSecret Zid Client Secret
   * @param zidAccessToken Zid Access Token
   * @param zidAuthorization Zid Authorization
   * @param zidRefreshToken Zid refresh token
   * @param flipkartClientId Flipkart Client ID
   * @param flipkartClientSecret Flipkart Client Secret
   * @param allegroClientId Allegro Client ID
   * @param allegroClientSecret Allegro Client Secret
   * @param allegroAccessToken Allegro Access Token
   * @param allegroRefreshToken Allegro Refresh Token
   * @param allegroEnvironment Allegro Environment
   * @param zohoClientId Zoho Client ID
   * @param zohoClientSecret Zoho Client Secret
   * @param zohoRefreshToken Zoho Refresh Token
   * @param zohoRegion Zoho API endpoint Region
   * @param tiendanubeUserId Tiendanube User ID
   * @param tiendanubeAccessToken Tiendanube Access Token
   * @param tiendanubeClientSecret Tiendanube Client Secret
   * @param ottoClientId Otto Client ID
   * @param ottoClientSecret Otto Client Secret
   * @param ottoAppId Otto App ID
   * @param ottoRefreshToken Otto Refresh Token
   * @param ottoEnvironment Otto Environment
   * @param ottoAccessToken Otto Access Token
   * @param tiktokshopAppKey TikTok Shop App Key
   * @param tiktokshopAppSecret TikTok Shop App Secret
   * @param tiktokshopRefreshToken TikTok Shop Refresh Token
   * @param tiktokshopAccessToken TikTok Shop Access Token
   * @param sallaClientId Salla Client ID
   * @param sallaClientSecret Salla Client Secret
   * @param sallaRefreshToken Salla Refresh Token
   * @param sallaAccessToken Salla Access Token
   * @param temuAppKey Temu App Key
   * @param temuAppSecret Temu App Secret
   * @param temuAccessToken Temu Access Token
   * @param temuRegion Temu API endpoint Region.
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response accountConfigUpdate (Boolean replaceParameters, String newStoreUrl, String newStoreKey, String bridgeUrl, String storeRoot, String dbTablesPrefix, String userAgent, String _3dcartPrivateKey, String _3dcartAccessToken, String _3dcartapiApiKey, String amazonSpClientId, String amazonSpClientSecret, String amazonSpRefreshToken, String amazonSpAwsRegion, String amazonSpApiEnvironment, String amazonSellerId, String aspdotnetstorefrontApiUser, String aspdotnetstorefrontApiPass, String bigcommerceapiAdminAccount, String bigcommerceapiApiPath, String bigcommerceapiApiKey, String bigcommerceapiClientId, String bigcommerceapiAccessToken, String bigcommerceapiContext, String bolApiKey, String bolApiSecret, Integer bolRetailerId, String demandwareClientId, String demandwareApiPassword, String demandwareUserName, String demandwareUserPassword, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String ecwidAcessToken, String ecwidStoreId, String lazadaAppId, String lazadaAppSecret, String lazadaRefreshToken, String lazadaRegion, String etsyKeystring, String etsySharedSecret, String etsyAccessToken, String etsyTokenSecret, String etsyClientId, String etsyRefreshToken, String facebookAppId, String facebookAppSecret, String facebookAccessToken, String facebookBusinessId, String netoApiKey, String netoApiUsername, String shoplineAccessToken, String shoplineAppKey, String shoplineAppSecret, String shoplineSharedSecret, String shopifyAccessToken, String shopifyApiKey, String shopifyApiPassword, String shopifySharedSecret, String shopeePartnerId, String shopeePartnerKey, String shopeeShopId, String shopeeRefreshToken, String shopeeRegion, String shopeeEnvironment, String shoplazzaAccessToken, String shoplazzaSharedSecret, String mivaAccessToken, String mivaSignature, String shopwareAccessKey, String unasApiKey, String shopwareApiKey, String shopwareApiSecret, String bigcartelUserName, String bigcartelPassword, String bricklinkConsumerKey, String bricklinkConsumerSecret, String bricklinkToken, String bricklinkTokenSecret, String volusionLogin, String volusionPassword, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String walmartRegion, String squareClientId, String squareClientSecret, String squareRefreshToken, String squarespaceApiKey, String squarespaceClientId, String squarespaceClientSecret, String squarespaceAccessToken, String squarespaceRefreshToken, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String lightspeedApiKey, String lightspeedApiSecret, String commercehqApiKey, String commercehqApiPassword, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixInstanceId, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken, String flipkartClientId, String flipkartClientSecret, String allegroClientId, String allegroClientSecret, String allegroAccessToken, String allegroRefreshToken, String allegroEnvironment, String zohoClientId, String zohoClientSecret, String zohoRefreshToken, String zohoRegion, Integer tiendanubeUserId, String tiendanubeAccessToken, String tiendanubeClientSecret, String ottoClientId, String ottoClientSecret, String ottoAppId, String ottoRefreshToken, String ottoEnvironment, String ottoAccessToken, String tiktokshopAppKey, String tiktokshopAppSecret, String tiktokshopRefreshToken, String tiktokshopAccessToken, String sallaClientId, String sallaClientSecret, String sallaRefreshToken, String sallaAccessToken, String temuAppKey, String temuAppSecret, String temuAccessToken, String temuRegion) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/account.config.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "replace_parameters", replaceParameters));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "new_store_url", newStoreUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "new_store_key", newStoreKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bridge_url", bridgeUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_root", storeRoot));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "db_tables_prefix", dbTablesPrefix));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "user_agent", userAgent));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "3dcart_private_key", _3dcartPrivateKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "3dcart_access_token", _3dcartAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "3dcartapi_api_key", _3dcartapiApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_client_id", amazonSpClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_client_secret", amazonSpClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_refresh_token", amazonSpRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_aws_region", amazonSpAwsRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_api_environment", amazonSpApiEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_seller_id", amazonSellerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aspdotnetstorefront_api_user", aspdotnetstorefrontApiUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aspdotnetstorefront_api_pass", aspdotnetstorefrontApiPass));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_admin_account", bigcommerceapiAdminAccount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_api_path", bigcommerceapiApiPath));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_api_key", bigcommerceapiApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_client_id", bigcommerceapiClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_access_token", bigcommerceapiAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_context", bigcommerceapiContext));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bol_api_key", bolApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bol_api_secret", bolApiSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bol_retailer_id", bolRetailerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "demandware_client_id", demandwareClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "demandware_api_password", demandwareApiPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "demandware_user_name", demandwareUserName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "demandware_user_password", demandwareUserPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_client_id", ebayClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_client_secret", ebayClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_runame", ebayRuname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_access_token", ebayAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_refresh_token", ebayRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_environment", ebayEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_site_id", ebaySiteId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ecwid_acess_token", ecwidAcessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ecwid_store_id", ecwidStoreId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lazada_app_id", lazadaAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lazada_app_secret", lazadaAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lazada_refresh_token", lazadaRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lazada_region", lazadaRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_keystring", etsyKeystring));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_shared_secret", etsySharedSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_access_token", etsyAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_token_secret", etsyTokenSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_client_id", etsyClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_refresh_token", etsyRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "facebook_app_id", facebookAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "facebook_app_secret", facebookAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "facebook_access_token", facebookAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "facebook_business_id", facebookBusinessId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "neto_api_key", netoApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "neto_api_username", netoApiUsername));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopline_access_token", shoplineAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopline_app_key", shoplineAppKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopline_app_secret", shoplineAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopline_shared_secret", shoplineSharedSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopify_access_token", shopifyAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopify_api_key", shopifyApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopify_api_password", shopifyApiPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopify_shared_secret", shopifySharedSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_partner_id", shopeePartnerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_partner_key", shopeePartnerKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_shop_id", shopeeShopId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_refresh_token", shopeeRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_region", shopeeRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_environment", shopeeEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shoplazza_access_token", shoplazzaAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shoplazza_shared_secret", shoplazzaSharedSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "miva_access_token", mivaAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "miva_signature", mivaSignature));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopware_access_key", shopwareAccessKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "unas_api_key", unasApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopware_api_key", shopwareApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopware_api_secret", shopwareApiSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcartel_user_name", bigcartelUserName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcartel_password", bigcartelPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bricklink_consumer_key", bricklinkConsumerKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bricklink_consumer_secret", bricklinkConsumerSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bricklink_token", bricklinkToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bricklink_token_secret", bricklinkTokenSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "volusion_login", volusionLogin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "volusion_password", volusionPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_client_id", walmartClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_client_secret", walmartClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_environment", walmartEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_channel_type", walmartChannelType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_region", walmartRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "square_client_id", squareClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "square_client_secret", squareClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "square_refresh_token", squareRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_api_key", squarespaceApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_client_id", squarespaceClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_client_secret", squarespaceClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_access_token", squarespaceAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_refresh_token", squarespaceRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hybris_client_id", hybrisClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hybris_client_secret", hybrisClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hybris_username", hybrisUsername));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hybris_password", hybrisPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "hybris_websites", hybrisWebsites));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lightspeed_api_key", lightspeedApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lightspeed_api_secret", lightspeedApiSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "commercehq_api_key", commercehqApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "commercehq_api_password", commercehqApiPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wc_consumer_key", wcConsumerKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wc_consumer_secret", wcConsumerSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "magento_consumer_key", magentoConsumerKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "magento_consumer_secret", magentoConsumerSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "magento_access_token", magentoAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "magento_token_secret", magentoTokenSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "prestashop_webservice_key", prestashopWebserviceKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wix_app_id", wixAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wix_app_secret_key", wixAppSecretKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wix_instance_id", wixInstanceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wix_refresh_token", wixRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mercado_libre_app_id", mercadoLibreAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mercado_libre_app_secret_key", mercadoLibreAppSecretKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mercado_libre_refresh_token", mercadoLibreRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_client_id", zidClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_client_secret", zidClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_access_token", zidAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_authorization", zidAuthorization));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_refresh_token", zidRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "flipkart_client_id", flipkartClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "flipkart_client_secret", flipkartClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_client_id", allegroClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_client_secret", allegroClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_access_token", allegroAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_refresh_token", allegroRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_environment", allegroEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zoho_client_id", zohoClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zoho_client_secret", zohoClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zoho_refresh_token", zohoRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zoho_region", zohoRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiendanube_user_id", tiendanubeUserId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiendanube_access_token", tiendanubeAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiendanube_client_secret", tiendanubeClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_client_id", ottoClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_client_secret", ottoClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_app_id", ottoAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_refresh_token", ottoRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_environment", ottoEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_access_token", ottoAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiktokshop_app_key", tiktokshopAppKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiktokshop_app_secret", tiktokshopAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiktokshop_refresh_token", tiktokshopRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiktokshop_access_token", tiktokshopAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "salla_client_id", sallaClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "salla_client_secret", sallaClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "salla_refresh_token", sallaRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "salla_access_token", sallaAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "temu_app_key", temuAppKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "temu_app_secret", temuAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "temu_access_token", temuAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "temu_region", temuRegion));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * account.config.update
   * Use this method to automate the change of credentials used to connect online stores. The list of supported parameters differs depending on the platform.
   * @param replaceParameters Identifies if there is a necessity to replace parameters   * @param newStoreUrl The web address of the store you want to update to connect to API2Cart   * @param newStoreKey Update store key   * @param bridgeUrl This parameter allows to set up store with custom bridge url (also you must use store_root parameter if a bridge folder is not in the root folder of the store)   * @param storeRoot Absolute path to the store root directory (used with \&quot;bridge_url\&quot; parameter)   * @param dbTablesPrefix DB tables prefix   * @param userAgent This parameter allows you to set your custom user agent, which will be used in requests to the store. Please use it cautiously, as the store&#39;s firewall may block specific values.   * @param _3dcartPrivateKey 3DCart Private Key   * @param _3dcartAccessToken 3DCart Token   * @param _3dcartapiApiKey 3DCart API Key   * @param amazonSpClientId Amazon SP API app client id   * @param amazonSpClientSecret Amazon SP API app client secret   * @param amazonSpRefreshToken Amazon SP API OAuth refresh token   * @param amazonSpAwsRegion Amazon AWS Region   * @param amazonSpApiEnvironment Amazon SP API environment   * @param amazonSellerId Amazon Seller ID (Merchant token)   * @param aspdotnetstorefrontApiUser It&#39;s a AspDotNetStorefront account for which API is available   * @param aspdotnetstorefrontApiPass AspDotNetStorefront API Password   * @param bigcommerceapiAdminAccount It&#39;s a BigCommerce account for which API is enabled   * @param bigcommerceapiApiPath BigCommerce API URL   * @param bigcommerceapiApiKey Bigcommerce API Key   * @param bigcommerceapiClientId Client ID of the requesting app   * @param bigcommerceapiAccessToken Access token authorizing the app to access resources on behalf of a user   * @param bigcommerceapiContext API Path section unique to the store   * @param bolApiKey Bol API Key   * @param bolApiSecret Bol API Secret   * @param bolRetailerId Bol Retailer ID   * @param demandwareClientId Demandware client id   * @param demandwareApiPassword Demandware api password   * @param demandwareUserName Demandware user name   * @param demandwareUserPassword Demandware user password   * @param ebayClientId Application ID (AppID).   * @param ebayClientSecret Shared Secret from eBay application   * @param ebayRuname The RuName value that eBay assigns to your application.   * @param ebayAccessToken Used to authenticate API requests.   * @param ebayRefreshToken Used to renew the access token.   * @param ebayEnvironment eBay environment   * @param ebaySiteId eBay global ID   * @param ecwidAcessToken Access token authorizing the app to access resources on behalf of a user   * @param ecwidStoreId Store Id   * @param lazadaAppId Lazada App ID   * @param lazadaAppSecret Lazada App Secret   * @param lazadaRefreshToken Lazada Refresh Token   * @param lazadaRegion Lazada API endpoint Region   * @param etsyKeystring Etsy keystring   * @param etsySharedSecret Etsy shared secret   * @param etsyAccessToken Access token authorizing the app to access resources on behalf of a user   * @param etsyTokenSecret Secret token authorizing the app to access resources on behalf of a user   * @param etsyClientId Etsy Client Id   * @param etsyRefreshToken Etsy Refresh token   * @param facebookAppId Facebook App ID   * @param facebookAppSecret Facebook App Secret   * @param facebookAccessToken Facebook Access Token   * @param facebookBusinessId Facebook Business ID   * @param netoApiKey Neto API Key   * @param netoApiUsername Neto User Name   * @param shoplineAccessToken Shopline APP Key   * @param shoplineAppKey Shopline APP Key   * @param shoplineAppSecret Shopline App Secret   * @param shoplineSharedSecret Shopline Shared Secret   * @param shopifyAccessToken Access token authorizing the app to access resources on behalf of a user   * @param shopifyApiKey Shopify API Key   * @param shopifyApiPassword Shopify API Password   * @param shopifySharedSecret Shared secret   * @param shopeePartnerId Shopee Partner ID   * @param shopeePartnerKey Shopee Partner Key   * @param shopeeShopId Shopee SHOP ID   * @param shopeeRefreshToken Shopee Refresh Token   * @param shopeeRegion Shopee API endpoint Region. Use for Chinese Mainland or Brazil.   * @param shopeeEnvironment Shopee Environment   * @param shoplazzaAccessToken Access token authorizing the app to access resources on behalf of a user   * @param shoplazzaSharedSecret Shared secret   * @param mivaAccessToken Miva access token   * @param mivaSignature Miva signature   * @param shopwareAccessKey Shopware access key   * @param unasApiKey UNAS API Key   * @param shopwareApiKey Shopware api key   * @param shopwareApiSecret Shopware client secret access key   * @param bigcartelUserName Subdomain of store   * @param bigcartelPassword BigCartel account password   * @param bricklinkConsumerKey Bricklink Consumer Key   * @param bricklinkConsumerSecret Bricklink Consumer Secret   * @param bricklinkToken Bricklink Access Token   * @param bricklinkTokenSecret Bricklink Access Token Secret   * @param volusionLogin It&#39;s a Volusion account for which API is enabled   * @param volusionPassword Volusion API Password   * @param walmartClientId Walmart client ID. For the region &#39;ca&#39; use Consumer ID   * @param walmartClientSecret Walmart client secret. For the region &#39;ca&#39; use Private Key   * @param walmartEnvironment Walmart environment   * @param walmartChannelType Walmart WM_CONSUMER.CHANNEL.TYPE header   * @param walmartRegion Walmart region   * @param squareClientId Square (Weebly) Client ID   * @param squareClientSecret Square (Weebly) Client Secret   * @param squareRefreshToken Square (Weebly) Refresh Token   * @param squarespaceApiKey Squarespace API Key   * @param squarespaceClientId Squarespace Connector Client ID   * @param squarespaceClientSecret Squarespace Connector Client Secret   * @param squarespaceAccessToken Squarespace access token   * @param squarespaceRefreshToken Squarespace refresh token   * @param hybrisClientId Omni Commerce Connector Client ID   * @param hybrisClientSecret Omni Commerce Connector Client Secret   * @param hybrisUsername User Name   * @param hybrisPassword User password   * @param hybrisWebsites Websites to stores mapping data   * @param lightspeedApiKey LightSpeed api key   * @param lightspeedApiSecret LightSpeed api secret   * @param commercehqApiKey CommerceHQ api key   * @param commercehqApiPassword CommerceHQ api password   * @param wcConsumerKey Woocommerce consumer key   * @param wcConsumerSecret Woocommerce consumer secret   * @param magentoConsumerKey Magento Consumer Key   * @param magentoConsumerSecret Magento Consumer Secret   * @param magentoAccessToken Magento Access Token   * @param magentoTokenSecret Magento Token Secret   * @param prestashopWebserviceKey Prestashop webservice key   * @param wixAppId Wix App ID   * @param wixAppSecretKey Wix App Secret Key   * @param wixInstanceId Wix Instance ID   * @param wixRefreshToken Wix refresh token   * @param mercadoLibreAppId Mercado Libre App ID   * @param mercadoLibreAppSecretKey Mercado Libre App Secret Key   * @param mercadoLibreRefreshToken Mercado Libre Refresh Token   * @param zidClientId Zid Client ID   * @param zidClientSecret Zid Client Secret   * @param zidAccessToken Zid Access Token   * @param zidAuthorization Zid Authorization   * @param zidRefreshToken Zid refresh token   * @param flipkartClientId Flipkart Client ID   * @param flipkartClientSecret Flipkart Client Secret   * @param allegroClientId Allegro Client ID   * @param allegroClientSecret Allegro Client Secret   * @param allegroAccessToken Allegro Access Token   * @param allegroRefreshToken Allegro Refresh Token   * @param allegroEnvironment Allegro Environment   * @param zohoClientId Zoho Client ID   * @param zohoClientSecret Zoho Client Secret   * @param zohoRefreshToken Zoho Refresh Token   * @param zohoRegion Zoho API endpoint Region   * @param tiendanubeUserId Tiendanube User ID   * @param tiendanubeAccessToken Tiendanube Access Token   * @param tiendanubeClientSecret Tiendanube Client Secret   * @param ottoClientId Otto Client ID   * @param ottoClientSecret Otto Client Secret   * @param ottoAppId Otto App ID   * @param ottoRefreshToken Otto Refresh Token   * @param ottoEnvironment Otto Environment   * @param ottoAccessToken Otto Access Token   * @param tiktokshopAppKey TikTok Shop App Key   * @param tiktokshopAppSecret TikTok Shop App Secret   * @param tiktokshopRefreshToken TikTok Shop Refresh Token   * @param tiktokshopAccessToken TikTok Shop Access Token   * @param sallaClientId Salla Client ID   * @param sallaClientSecret Salla Client Secret   * @param sallaRefreshToken Salla Refresh Token   * @param sallaAccessToken Salla Access Token   * @param temuAppKey Temu App Key   * @param temuAppSecret Temu App Secret   * @param temuAccessToken Temu Access Token   * @param temuRegion Temu API endpoint Region.
  */
  public void accountConfigUpdate (Boolean replaceParameters, String newStoreUrl, String newStoreKey, String bridgeUrl, String storeRoot, String dbTablesPrefix, String userAgent, String _3dcartPrivateKey, String _3dcartAccessToken, String _3dcartapiApiKey, String amazonSpClientId, String amazonSpClientSecret, String amazonSpRefreshToken, String amazonSpAwsRegion, String amazonSpApiEnvironment, String amazonSellerId, String aspdotnetstorefrontApiUser, String aspdotnetstorefrontApiPass, String bigcommerceapiAdminAccount, String bigcommerceapiApiPath, String bigcommerceapiApiKey, String bigcommerceapiClientId, String bigcommerceapiAccessToken, String bigcommerceapiContext, String bolApiKey, String bolApiSecret, Integer bolRetailerId, String demandwareClientId, String demandwareApiPassword, String demandwareUserName, String demandwareUserPassword, String ebayClientId, String ebayClientSecret, String ebayRuname, String ebayAccessToken, String ebayRefreshToken, String ebayEnvironment, Integer ebaySiteId, String ecwidAcessToken, String ecwidStoreId, String lazadaAppId, String lazadaAppSecret, String lazadaRefreshToken, String lazadaRegion, String etsyKeystring, String etsySharedSecret, String etsyAccessToken, String etsyTokenSecret, String etsyClientId, String etsyRefreshToken, String facebookAppId, String facebookAppSecret, String facebookAccessToken, String facebookBusinessId, String netoApiKey, String netoApiUsername, String shoplineAccessToken, String shoplineAppKey, String shoplineAppSecret, String shoplineSharedSecret, String shopifyAccessToken, String shopifyApiKey, String shopifyApiPassword, String shopifySharedSecret, String shopeePartnerId, String shopeePartnerKey, String shopeeShopId, String shopeeRefreshToken, String shopeeRegion, String shopeeEnvironment, String shoplazzaAccessToken, String shoplazzaSharedSecret, String mivaAccessToken, String mivaSignature, String shopwareAccessKey, String unasApiKey, String shopwareApiKey, String shopwareApiSecret, String bigcartelUserName, String bigcartelPassword, String bricklinkConsumerKey, String bricklinkConsumerSecret, String bricklinkToken, String bricklinkTokenSecret, String volusionLogin, String volusionPassword, String walmartClientId, String walmartClientSecret, String walmartEnvironment, String walmartChannelType, String walmartRegion, String squareClientId, String squareClientSecret, String squareRefreshToken, String squarespaceApiKey, String squarespaceClientId, String squarespaceClientSecret, String squarespaceAccessToken, String squarespaceRefreshToken, String hybrisClientId, String hybrisClientSecret, String hybrisUsername, String hybrisPassword, List<String> hybrisWebsites, String lightspeedApiKey, String lightspeedApiSecret, String commercehqApiKey, String commercehqApiPassword, String wcConsumerKey, String wcConsumerSecret, String magentoConsumerKey, String magentoConsumerSecret, String magentoAccessToken, String magentoTokenSecret, String prestashopWebserviceKey, String wixAppId, String wixAppSecretKey, String wixInstanceId, String wixRefreshToken, String mercadoLibreAppId, String mercadoLibreAppSecretKey, String mercadoLibreRefreshToken, Integer zidClientId, String zidClientSecret, String zidAccessToken, String zidAuthorization, String zidRefreshToken, String flipkartClientId, String flipkartClientSecret, String allegroClientId, String allegroClientSecret, String allegroAccessToken, String allegroRefreshToken, String allegroEnvironment, String zohoClientId, String zohoClientSecret, String zohoRefreshToken, String zohoRegion, Integer tiendanubeUserId, String tiendanubeAccessToken, String tiendanubeClientSecret, String ottoClientId, String ottoClientSecret, String ottoAppId, String ottoRefreshToken, String ottoEnvironment, String ottoAccessToken, String tiktokshopAppKey, String tiktokshopAppSecret, String tiktokshopRefreshToken, String tiktokshopAccessToken, String sallaClientId, String sallaClientSecret, String sallaRefreshToken, String sallaAccessToken, String temuAppKey, String temuAppSecret, String temuAccessToken, String temuRegion, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/account.config.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "replace_parameters", replaceParameters));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "new_store_url", newStoreUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "new_store_key", newStoreKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bridge_url", bridgeUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_root", storeRoot));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "db_tables_prefix", dbTablesPrefix));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "user_agent", userAgent));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "3dcart_private_key", _3dcartPrivateKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "3dcart_access_token", _3dcartAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "3dcartapi_api_key", _3dcartapiApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_client_id", amazonSpClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_client_secret", amazonSpClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_refresh_token", amazonSpRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_aws_region", amazonSpAwsRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_sp_api_environment", amazonSpApiEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "amazon_seller_id", amazonSellerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aspdotnetstorefront_api_user", aspdotnetstorefrontApiUser));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "aspdotnetstorefront_api_pass", aspdotnetstorefrontApiPass));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_admin_account", bigcommerceapiAdminAccount));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_api_path", bigcommerceapiApiPath));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_api_key", bigcommerceapiApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_client_id", bigcommerceapiClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_access_token", bigcommerceapiAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcommerceapi_context", bigcommerceapiContext));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bol_api_key", bolApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bol_api_secret", bolApiSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bol_retailer_id", bolRetailerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "demandware_client_id", demandwareClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "demandware_api_password", demandwareApiPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "demandware_user_name", demandwareUserName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "demandware_user_password", demandwareUserPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_client_id", ebayClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_client_secret", ebayClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_runame", ebayRuname));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_access_token", ebayAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_refresh_token", ebayRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_environment", ebayEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_site_id", ebaySiteId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ecwid_acess_token", ecwidAcessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ecwid_store_id", ecwidStoreId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lazada_app_id", lazadaAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lazada_app_secret", lazadaAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lazada_refresh_token", lazadaRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lazada_region", lazadaRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_keystring", etsyKeystring));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_shared_secret", etsySharedSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_access_token", etsyAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_token_secret", etsyTokenSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_client_id", etsyClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "etsy_refresh_token", etsyRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "facebook_app_id", facebookAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "facebook_app_secret", facebookAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "facebook_access_token", facebookAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "facebook_business_id", facebookBusinessId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "neto_api_key", netoApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "neto_api_username", netoApiUsername));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopline_access_token", shoplineAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopline_app_key", shoplineAppKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopline_app_secret", shoplineAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopline_shared_secret", shoplineSharedSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopify_access_token", shopifyAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopify_api_key", shopifyApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopify_api_password", shopifyApiPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopify_shared_secret", shopifySharedSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_partner_id", shopeePartnerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_partner_key", shopeePartnerKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_shop_id", shopeeShopId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_refresh_token", shopeeRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_region", shopeeRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopee_environment", shopeeEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shoplazza_access_token", shoplazzaAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shoplazza_shared_secret", shoplazzaSharedSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "miva_access_token", mivaAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "miva_signature", mivaSignature));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopware_access_key", shopwareAccessKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "unas_api_key", unasApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopware_api_key", shopwareApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shopware_api_secret", shopwareApiSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcartel_user_name", bigcartelUserName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bigcartel_password", bigcartelPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bricklink_consumer_key", bricklinkConsumerKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bricklink_consumer_secret", bricklinkConsumerSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bricklink_token", bricklinkToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "bricklink_token_secret", bricklinkTokenSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "volusion_login", volusionLogin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "volusion_password", volusionPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_client_id", walmartClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_client_secret", walmartClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_environment", walmartEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_channel_type", walmartChannelType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "walmart_region", walmartRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "square_client_id", squareClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "square_client_secret", squareClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "square_refresh_token", squareRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_api_key", squarespaceApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_client_id", squarespaceClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_client_secret", squarespaceClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_access_token", squarespaceAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "squarespace_refresh_token", squarespaceRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hybris_client_id", hybrisClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hybris_client_secret", hybrisClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hybris_username", hybrisUsername));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "hybris_password", hybrisPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "hybris_websites", hybrisWebsites));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lightspeed_api_key", lightspeedApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lightspeed_api_secret", lightspeedApiSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "commercehq_api_key", commercehqApiKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "commercehq_api_password", commercehqApiPassword));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wc_consumer_key", wcConsumerKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wc_consumer_secret", wcConsumerSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "magento_consumer_key", magentoConsumerKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "magento_consumer_secret", magentoConsumerSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "magento_access_token", magentoAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "magento_token_secret", magentoTokenSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "prestashop_webservice_key", prestashopWebserviceKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wix_app_id", wixAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wix_app_secret_key", wixAppSecretKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wix_instance_id", wixInstanceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "wix_refresh_token", wixRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mercado_libre_app_id", mercadoLibreAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mercado_libre_app_secret_key", mercadoLibreAppSecretKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mercado_libre_refresh_token", mercadoLibreRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_client_id", zidClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_client_secret", zidClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_access_token", zidAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_authorization", zidAuthorization));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zid_refresh_token", zidRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "flipkart_client_id", flipkartClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "flipkart_client_secret", flipkartClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_client_id", allegroClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_client_secret", allegroClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_access_token", allegroAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_refresh_token", allegroRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "allegro_environment", allegroEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zoho_client_id", zohoClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zoho_client_secret", zohoClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zoho_refresh_token", zohoRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "zoho_region", zohoRegion));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiendanube_user_id", tiendanubeUserId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiendanube_access_token", tiendanubeAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiendanube_client_secret", tiendanubeClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_client_id", ottoClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_client_secret", ottoClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_app_id", ottoAppId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_refresh_token", ottoRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_environment", ottoEnvironment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "otto_access_token", ottoAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiktokshop_app_key", tiktokshopAppKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiktokshop_app_secret", tiktokshopAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiktokshop_refresh_token", tiktokshopRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tiktokshop_access_token", tiktokshopAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "salla_client_id", sallaClientId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "salla_client_secret", sallaClientSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "salla_refresh_token", sallaRefreshToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "salla_access_token", sallaAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "temu_app_key", temuAppKey));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "temu_app_secret", temuAppSecret));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "temu_access_token", temuAccessToken));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "temu_region", temuRegion));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * account.failed_webhooks
  * If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param ids List of сomma-separated webhook ids
   * @return AccountFailedWebhooks200Response
  */
  public AccountFailedWebhooks200Response accountFailedWebhooks (Integer start, Integer count, String ids) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/account.failed_webhooks.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountFailedWebhooks200Response) ApiInvoker.deserialize(localVarResponse, "", AccountFailedWebhooks200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * account.failed_webhooks
   * If the callback of your service for some reason could not accept webhooks from API2Cart, then with the help of this method you can get a list of missed webhooks to perform synchronization again using entity_id. Please note that we keep such records for 24 hours.
   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param ids List of сomma-separated webhook ids
  */
  public void accountFailedWebhooks (Integer start, Integer count, String ids, final Response.Listener<AccountFailedWebhooks200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/account.failed_webhooks.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountFailedWebhooks200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountFailedWebhooks200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * account.supported_platforms
  * Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.
   * @return AccountSupportedPlatforms200Response
  */
  public AccountSupportedPlatforms200Response accountSupportedPlatforms () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/account.supported_platforms.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountSupportedPlatforms200Response) ApiInvoker.deserialize(localVarResponse, "", AccountSupportedPlatforms200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * account.supported_platforms
   * Use this method to retrieve a list of supported platforms and the sets of parameters required for connecting to each of them. Note: some platforms may have multiple connection methods so that the response will contain multiple sets of parameters.

  */
  public void accountSupportedPlatforms (final Response.Listener<AccountSupportedPlatforms200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/account.supported_platforms.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountSupportedPlatforms200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountSupportedPlatforms200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
