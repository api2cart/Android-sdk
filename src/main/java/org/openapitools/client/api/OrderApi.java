/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.AttributeValueDelete200Response;
import org.openapitools.client.model.CategoryAddBatch200Response;
import java.util.*;
import org.openapitools.client.model.ModelResponseOrderAbandonedList;
import org.openapitools.client.model.ModelResponseOrderList;
import org.openapitools.client.model.ModelResponseOrderPreestimateShippingList;
import org.openapitools.client.model.ModelResponseOrderShipmentList;
import org.openapitools.client.model.ModelResponseOrderStatusList;
import org.openapitools.client.model.ModelResponseOrderTransactionList;
import org.openapitools.client.model.OrderAdd;
import org.openapitools.client.model.OrderAdd200Response;
import org.openapitools.client.model.OrderCount200Response;
import org.openapitools.client.model.OrderFinancialStatusList200Response;
import org.openapitools.client.model.OrderFind200Response;
import org.openapitools.client.model.OrderFulfillmentStatusList200Response;
import org.openapitools.client.model.OrderInfo200Response;
import org.openapitools.client.model.OrderPreestimateShippingList;
import org.openapitools.client.model.OrderRefundAdd;
import org.openapitools.client.model.OrderRefundAdd200Response;
import org.openapitools.client.model.OrderReturnAdd;
import org.openapitools.client.model.OrderReturnAdd200Response;
import org.openapitools.client.model.OrderReturnUpdate;
import org.openapitools.client.model.OrderShipmentAdd;
import org.openapitools.client.model.OrderShipmentAdd200Response;
import org.openapitools.client.model.OrderShipmentAddBatch;
import org.openapitools.client.model.OrderShipmentDelete200Response;
import org.openapitools.client.model.OrderShipmentInfo200Response;
import org.openapitools.client.model.OrderShipmentTrackingAdd;
import org.openapitools.client.model.OrderShipmentTrackingAdd200Response;
import org.openapitools.client.model.OrderShipmentUpdate;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class OrderApi {
  String basePath = "https://api.api2cart.com/v1.1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * order.abandoned.list
  * Get list of orders that were left by customers before completing the order.
   * @param customerId Retrieves orders specified by customer id
   * @param customerEmail Retrieves orders specified by customer email
   * @param createdTo Retrieve entities to their creation date
   * @param createdFrom Retrieve entities from their creation date
   * @param modifiedTo Retrieve entities to their modification date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param skipEmptyEmail Filter empty emails
   * @param storeId Store Id
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param start This parameter sets the number from which you want to get entities
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @return ModelResponseOrderAbandonedList
  */
  public ModelResponseOrderAbandonedList orderAbandonedList (String customerId, String customerEmail, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, Boolean skipEmptyEmail, String storeId, String pageCursor, Integer count, Integer start, String params, String responseFields, String exclude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/order.abandoned.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_id", customerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_email", customerEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "skip_empty_email", skipEmptyEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseOrderAbandonedList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseOrderAbandonedList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.abandoned.list
   * Get list of orders that were left by customers before completing the order.
   * @param customerId Retrieves orders specified by customer id   * @param customerEmail Retrieves orders specified by customer email   * @param createdTo Retrieve entities to their creation date   * @param createdFrom Retrieve entities from their creation date   * @param modifiedTo Retrieve entities to their modification date   * @param modifiedFrom Retrieve entities from their modification date   * @param skipEmptyEmail Filter empty emails   * @param storeId Store Id   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param start This parameter sets the number from which you want to get entities   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  */
  public void orderAbandonedList (String customerId, String customerEmail, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, Boolean skipEmptyEmail, String storeId, String pageCursor, Integer count, Integer start, String params, String responseFields, String exclude, final Response.Listener<ModelResponseOrderAbandonedList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/order.abandoned.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_id", customerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_email", customerEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "skip_empty_email", skipEmptyEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseOrderAbandonedList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseOrderAbandonedList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.add
  * Add a new order to the cart.
   * @param orderAdd 
   * @return OrderAdd200Response
  */
  public OrderAdd200Response orderAdd (OrderAdd orderAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = orderAdd;
    // verify the required parameter 'orderAdd' is set
    if (orderAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderAdd' when calling orderAdd",
        new ApiException(400, "Missing the required parameter 'orderAdd' when calling orderAdd"));
    }

    // create path and map variables
    String path = "/order.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderAdd200Response) ApiInvoker.deserialize(localVarResponse, "", OrderAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.add
   * Add a new order to the cart.
   * @param orderAdd 
  */
  public void orderAdd (OrderAdd orderAdd, final Response.Listener<OrderAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = orderAdd;

    // verify the required parameter 'orderAdd' is set
    if (orderAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderAdd' when calling orderAdd",
        new ApiException(400, "Missing the required parameter 'orderAdd' when calling orderAdd"));
    }

    // create path and map variables
    String path = "/order.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.count
  * Count orders in store
   * @param customerId Counts orders quantity specified by customer id
   * @param customerEmail Counts orders quantity specified by customer email
   * @param orderStatus Counts orders quantity specified by order status
   * @param orderStatusIds Retrieves orders specified by order statuses
   * @param createdTo Retrieve entities to their creation date
   * @param createdFrom Retrieve entities from their creation date
   * @param modifiedTo Retrieve entities to their modification date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param storeId Counts orders quantity specified by store id
   * @param ids Counts orders specified by ids
   * @param orderIds Counts orders specified by order ids
   * @param ebayOrderStatus Counts orders quantity specified by order status
   * @param financialStatus Counts orders quantity specified by financial status
   * @param financialStatusIds Retrieves orders count specified by financial status ids
   * @param fulfillmentChannel Retrieves order with a fulfillment channel
   * @param fulfillmentStatus Create order with fulfillment status
   * @param shippingMethod Retrieve entities according to shipping method
   * @param deliveryMethod Retrieves order with delivery method
   * @param tags Order tags
   * @param shipNodeType Retrieves order with ship node type
   * @return OrderCount200Response
  */
  public OrderCount200Response orderCount (String customerId, String customerEmail, String orderStatus, List<String> orderStatusIds, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String financialStatus, List<String> financialStatusIds, String fulfillmentChannel, String fulfillmentStatus, String shippingMethod, String deliveryMethod, String tags, String shipNodeType) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/order.count.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_id", customerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_email", customerEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_status", orderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "order_status_ids", orderStatusIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_ids", orderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_order_status", ebayOrderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "financial_status", financialStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "financial_status_ids", financialStatusIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_channel", fulfillmentChannel));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_status", fulfillmentStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shipping_method", shippingMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "delivery_method", deliveryMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tags", tags));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ship_node_type", shipNodeType));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderCount200Response) ApiInvoker.deserialize(localVarResponse, "", OrderCount200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.count
   * Count orders in store
   * @param customerId Counts orders quantity specified by customer id   * @param customerEmail Counts orders quantity specified by customer email   * @param orderStatus Counts orders quantity specified by order status   * @param orderStatusIds Retrieves orders specified by order statuses   * @param createdTo Retrieve entities to their creation date   * @param createdFrom Retrieve entities from their creation date   * @param modifiedTo Retrieve entities to their modification date   * @param modifiedFrom Retrieve entities from their modification date   * @param storeId Counts orders quantity specified by store id   * @param ids Counts orders specified by ids   * @param orderIds Counts orders specified by order ids   * @param ebayOrderStatus Counts orders quantity specified by order status   * @param financialStatus Counts orders quantity specified by financial status   * @param financialStatusIds Retrieves orders count specified by financial status ids   * @param fulfillmentChannel Retrieves order with a fulfillment channel   * @param fulfillmentStatus Create order with fulfillment status   * @param shippingMethod Retrieve entities according to shipping method   * @param deliveryMethod Retrieves order with delivery method   * @param tags Order tags   * @param shipNodeType Retrieves order with ship node type
  */
  public void orderCount (String customerId, String customerEmail, String orderStatus, List<String> orderStatusIds, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String financialStatus, List<String> financialStatusIds, String fulfillmentChannel, String fulfillmentStatus, String shippingMethod, String deliveryMethod, String tags, String shipNodeType, final Response.Listener<OrderCount200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/order.count.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_id", customerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_email", customerEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_status", orderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "order_status_ids", orderStatusIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_ids", orderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_order_status", ebayOrderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "financial_status", financialStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "financial_status_ids", financialStatusIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_channel", fulfillmentChannel));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_status", fulfillmentStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shipping_method", shippingMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "delivery_method", deliveryMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tags", tags));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ship_node_type", shipNodeType));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderCount200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderCount200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.financial_status.list
  * Retrieve list of financial statuses
   * @return OrderFinancialStatusList200Response
  */
  public OrderFinancialStatusList200Response orderFinancialStatusList () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/order.financial_status.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderFinancialStatusList200Response) ApiInvoker.deserialize(localVarResponse, "", OrderFinancialStatusList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.financial_status.list
   * Retrieve list of financial statuses

  */
  public void orderFinancialStatusList (final Response.Listener<OrderFinancialStatusList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/order.financial_status.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderFinancialStatusList200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderFinancialStatusList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.find
  * This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
   * @param customerId Retrieves orders specified by customer id
   * @param customerEmail Retrieves orders specified by customer email
   * @param orderStatus Retrieves orders specified by order status
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param createdTo Retrieve entities to their creation date
   * @param createdFrom Retrieve entities from their creation date
   * @param modifiedTo Retrieve entities to their modification date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param financialStatus Retrieves orders specified by financial status
   * @return OrderFind200Response
  */
  public OrderFind200Response orderFind (String customerId, String customerEmail, String orderStatus, Integer start, Integer count, String params, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String financialStatus) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/order.find.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_id", customerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_email", customerEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_status", orderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "financial_status", financialStatus));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderFind200Response) ApiInvoker.deserialize(localVarResponse, "", OrderFind200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.find
   * This method is deprecated and won&#39;t be supported in the future. Please use \&quot;order.list\&quot; instead.
   * @param customerId Retrieves orders specified by customer id   * @param customerEmail Retrieves orders specified by customer email   * @param orderStatus Retrieves orders specified by order status   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param createdTo Retrieve entities to their creation date   * @param createdFrom Retrieve entities from their creation date   * @param modifiedTo Retrieve entities to their modification date   * @param modifiedFrom Retrieve entities from their modification date   * @param financialStatus Retrieves orders specified by financial status
  */
  public void orderFind (String customerId, String customerEmail, String orderStatus, Integer start, Integer count, String params, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String financialStatus, final Response.Listener<OrderFind200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/order.find.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_id", customerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_email", customerEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_status", orderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "financial_status", financialStatus));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderFind200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderFind200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.fulfillment_status.list
  * Retrieve list of fulfillment statuses
   * @param action Available statuses for the specified action.
   * @return OrderFulfillmentStatusList200Response
  */
  public OrderFulfillmentStatusList200Response orderFulfillmentStatusList (String action) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/order.fulfillment_status.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "action", action));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderFulfillmentStatusList200Response) ApiInvoker.deserialize(localVarResponse, "", OrderFulfillmentStatusList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.fulfillment_status.list
   * Retrieve list of fulfillment statuses
   * @param action Available statuses for the specified action.
  */
  public void orderFulfillmentStatusList (String action, final Response.Listener<OrderFulfillmentStatusList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/order.fulfillment_status.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "action", action));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderFulfillmentStatusList200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderFulfillmentStatusList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.info
  * Info about a specific order by ID
   * @param orderId Retrieves order’s info specified by order id
   * @param id Retrieves order info specified by id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param storeId Defines store id where the order should be found
   * @param enableCache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache
   * @param useLatestApiVersion Use the latest platform API version
   * @return OrderInfo200Response
  */
  public OrderInfo200Response orderInfo (String orderId, String id, String params, String responseFields, String exclude, String storeId, Boolean enableCache, Boolean useLatestApiVersion) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/order.info.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable_cache", enableCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderInfo200Response) ApiInvoker.deserialize(localVarResponse, "", OrderInfo200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.info
   * Info about a specific order by ID
   * @param orderId Retrieves order’s info specified by order id   * @param id Retrieves order info specified by id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param storeId Defines store id where the order should be found   * @param enableCache If the value is &#39;true&#39; and order exist in our cache, we will return order.info response from cache   * @param useLatestApiVersion Use the latest platform API version
  */
  public void orderInfo (String orderId, String id, String params, String responseFields, String exclude, String storeId, Boolean enableCache, Boolean useLatestApiVersion, final Response.Listener<OrderInfo200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/order.info.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable_cache", enableCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderInfo200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderInfo200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.list
  * Get list of orders from store.
   * @param customerId Retrieves orders specified by customer id
   * @param customerEmail Retrieves orders specified by customer email
   * @param phone Filter orders by customer&#39;s phone number
   * @param orderStatus Retrieves orders specified by order status
   * @param orderStatusIds Retrieves orders specified by order statuses
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param pageCursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param sortBy Set field to sort by
   * @param sortDirection Set sorting direction
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param createdTo Retrieve entities to their creation date
   * @param createdFrom Retrieve entities from their creation date
   * @param modifiedTo Retrieve entities to their modification date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param storeId Store Id
   * @param ids Retrieves orders specified by ids
   * @param orderIds Retrieves orders specified by order ids
   * @param ebayOrderStatus Retrieves orders specified by order status
   * @param basketId Retrieves order’s info specified by basket id.
   * @param financialStatus Retrieves orders specified by financial status
   * @param financialStatusIds Retrieves orders specified by financial status ids
   * @param fulfillmentStatus Create order with fulfillment status
   * @param fulfillmentChannel Retrieves order with a fulfillment channel
   * @param shippingMethod Retrieve entities according to shipping method
   * @param skipOrderIds Skipped orders by ids
   * @param sinceId Retrieve entities starting from the specified id.
   * @param isDeleted Filter deleted orders
   * @param shippingCountryIso3 Retrieve entities according to shipping country
   * @param enableCache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)
   * @param deliveryMethod Retrieves order with delivery method
   * @param tags Order tags
   * @param shipNodeType Retrieves order with ship node type
   * @param currencyId Currency Id
   * @param returnStatus Retrieves orders specified by return status
   * @param useLatestApiVersion Use the latest platform API version
   * @return ModelResponseOrderList
  */
  public ModelResponseOrderList orderList (String customerId, String customerEmail, String phone, String orderStatus, List<String> orderStatusIds, Integer start, Integer count, String pageCursor, String sortBy, String sortDirection, String params, String responseFields, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String basketId, String financialStatus, List<String> financialStatusIds, String fulfillmentStatus, String fulfillmentChannel, String shippingMethod, String skipOrderIds, String sinceId, Boolean isDeleted, String shippingCountryIso3, Boolean enableCache, String deliveryMethod, String tags, String shipNodeType, String currencyId, String returnStatus, Boolean useLatestApiVersion) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/order.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_id", customerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_email", customerEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "phone", phone));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_status", orderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "order_status_ids", orderStatusIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_direction", sortDirection));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_ids", orderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_order_status", ebayOrderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "basket_id", basketId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "financial_status", financialStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "financial_status_ids", financialStatusIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_status", fulfillmentStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_channel", fulfillmentChannel));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shipping_method", shippingMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "skip_order_ids", skipOrderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "since_id", sinceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_deleted", isDeleted));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shipping_country_iso3", shippingCountryIso3));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable_cache", enableCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "delivery_method", deliveryMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tags", tags));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ship_node_type", shipNodeType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_status", returnStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseOrderList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseOrderList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.list
   * Get list of orders from store.
   * @param customerId Retrieves orders specified by customer id   * @param customerEmail Retrieves orders specified by customer email   * @param phone Filter orders by customer&#39;s phone number   * @param orderStatus Retrieves orders specified by order status   * @param orderStatusIds Retrieves orders specified by order statuses   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param pageCursor Used to retrieve orders via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param sortBy Set field to sort by   * @param sortDirection Set sorting direction   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param createdTo Retrieve entities to their creation date   * @param createdFrom Retrieve entities from their creation date   * @param modifiedTo Retrieve entities to their modification date   * @param modifiedFrom Retrieve entities from their modification date   * @param storeId Store Id   * @param ids Retrieves orders specified by ids   * @param orderIds Retrieves orders specified by order ids   * @param ebayOrderStatus Retrieves orders specified by order status   * @param basketId Retrieves order’s info specified by basket id.   * @param financialStatus Retrieves orders specified by financial status   * @param financialStatusIds Retrieves orders specified by financial status ids   * @param fulfillmentStatus Create order with fulfillment status   * @param fulfillmentChannel Retrieves order with a fulfillment channel   * @param shippingMethod Retrieve entities according to shipping method   * @param skipOrderIds Skipped orders by ids   * @param sinceId Retrieve entities starting from the specified id.   * @param isDeleted Filter deleted orders   * @param shippingCountryIso3 Retrieve entities according to shipping country   * @param enableCache If the value is &#39;true&#39;, we will cache orders for a 15 minutes in order to increase speed and reduce requests throttling for some methods and shoping platforms (for example order.shipment.add)   * @param deliveryMethod Retrieves order with delivery method   * @param tags Order tags   * @param shipNodeType Retrieves order with ship node type   * @param currencyId Currency Id   * @param returnStatus Retrieves orders specified by return status   * @param useLatestApiVersion Use the latest platform API version
  */
  public void orderList (String customerId, String customerEmail, String phone, String orderStatus, List<String> orderStatusIds, Integer start, Integer count, String pageCursor, String sortBy, String sortDirection, String params, String responseFields, String exclude, String createdTo, String createdFrom, String modifiedTo, String modifiedFrom, String storeId, String ids, String orderIds, String ebayOrderStatus, String basketId, String financialStatus, List<String> financialStatusIds, String fulfillmentStatus, String fulfillmentChannel, String shippingMethod, String skipOrderIds, String sinceId, Boolean isDeleted, String shippingCountryIso3, Boolean enableCache, String deliveryMethod, String tags, String shipNodeType, String currencyId, String returnStatus, Boolean useLatestApiVersion, final Response.Listener<ModelResponseOrderList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/order.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_id", customerId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "customer_email", customerEmail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "phone", phone));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_status", orderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "order_status_ids", orderStatusIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_by", sortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_direction", sortDirection));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_ids", orderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ebay_order_status", ebayOrderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "basket_id", basketId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "financial_status", financialStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("multi", "financial_status_ids", financialStatusIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_status", fulfillmentStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_channel", fulfillmentChannel));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shipping_method", shippingMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "skip_order_ids", skipOrderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "since_id", sinceId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_deleted", isDeleted));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shipping_country_iso3", shippingCountryIso3));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "enable_cache", enableCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "delivery_method", deliveryMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "tags", tags));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ship_node_type", shipNodeType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "currency_id", currencyId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_status", returnStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "use_latest_api_version", useLatestApiVersion));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseOrderList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseOrderList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.preestimate_shipping.list
  * Retrieve list of order preestimated shipping methods
   * @param orderPreestimateShippingList 
   * @return ModelResponseOrderPreestimateShippingList
  */
  public ModelResponseOrderPreestimateShippingList orderPreestimateShippingList (OrderPreestimateShippingList orderPreestimateShippingList) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = orderPreestimateShippingList;
    // verify the required parameter 'orderPreestimateShippingList' is set
    if (orderPreestimateShippingList == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderPreestimateShippingList' when calling orderPreestimateShippingList",
        new ApiException(400, "Missing the required parameter 'orderPreestimateShippingList' when calling orderPreestimateShippingList"));
    }

    // create path and map variables
    String path = "/order.preestimate_shipping.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseOrderPreestimateShippingList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseOrderPreestimateShippingList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.preestimate_shipping.list
   * Retrieve list of order preestimated shipping methods
   * @param orderPreestimateShippingList 
  */
  public void orderPreestimateShippingList (OrderPreestimateShippingList orderPreestimateShippingList, final Response.Listener<ModelResponseOrderPreestimateShippingList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = orderPreestimateShippingList;

    // verify the required parameter 'orderPreestimateShippingList' is set
    if (orderPreestimateShippingList == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderPreestimateShippingList' when calling orderPreestimateShippingList",
        new ApiException(400, "Missing the required parameter 'orderPreestimateShippingList' when calling orderPreestimateShippingList"));
    }

    // create path and map variables
    String path = "/order.preestimate_shipping.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseOrderPreestimateShippingList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseOrderPreestimateShippingList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.refund.add
  * Add a refund to the order.
   * @param orderRefundAdd 
   * @return OrderRefundAdd200Response
  */
  public OrderRefundAdd200Response orderRefundAdd (OrderRefundAdd orderRefundAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = orderRefundAdd;
    // verify the required parameter 'orderRefundAdd' is set
    if (orderRefundAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderRefundAdd' when calling orderRefundAdd",
        new ApiException(400, "Missing the required parameter 'orderRefundAdd' when calling orderRefundAdd"));
    }

    // create path and map variables
    String path = "/order.refund.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderRefundAdd200Response) ApiInvoker.deserialize(localVarResponse, "", OrderRefundAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.refund.add
   * Add a refund to the order.
   * @param orderRefundAdd 
  */
  public void orderRefundAdd (OrderRefundAdd orderRefundAdd, final Response.Listener<OrderRefundAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = orderRefundAdd;

    // verify the required parameter 'orderRefundAdd' is set
    if (orderRefundAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderRefundAdd' when calling orderRefundAdd",
        new ApiException(400, "Missing the required parameter 'orderRefundAdd' when calling orderRefundAdd"));
    }

    // create path and map variables
    String path = "/order.refund.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderRefundAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderRefundAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.return.add
  * Create new return request.
   * @param orderReturnAdd 
   * @return OrderReturnAdd200Response
  */
  public OrderReturnAdd200Response orderReturnAdd (OrderReturnAdd orderReturnAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = orderReturnAdd;
    // verify the required parameter 'orderReturnAdd' is set
    if (orderReturnAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderReturnAdd' when calling orderReturnAdd",
        new ApiException(400, "Missing the required parameter 'orderReturnAdd' when calling orderReturnAdd"));
    }

    // create path and map variables
    String path = "/order.return.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderReturnAdd200Response) ApiInvoker.deserialize(localVarResponse, "", OrderReturnAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.return.add
   * Create new return request.
   * @param orderReturnAdd 
  */
  public void orderReturnAdd (OrderReturnAdd orderReturnAdd, final Response.Listener<OrderReturnAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = orderReturnAdd;

    // verify the required parameter 'orderReturnAdd' is set
    if (orderReturnAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderReturnAdd' when calling orderReturnAdd",
        new ApiException(400, "Missing the required parameter 'orderReturnAdd' when calling orderReturnAdd"));
    }

    // create path and map variables
    String path = "/order.return.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderReturnAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderReturnAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.return.delete
  * Delete return.
   * @param returnId Return ID
   * @param orderId Defines the order id
   * @param storeId Store Id
   * @return AttributeValueDelete200Response
  */
  public AttributeValueDelete200Response orderReturnDelete (String returnId, String orderId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling orderReturnDelete",
        new ApiException(400, "Missing the required parameter 'returnId' when calling orderReturnDelete"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderReturnDelete",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderReturnDelete"));
    }

    // create path and map variables
    String path = "/order.return.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_id", returnId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeValueDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeValueDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.return.delete
   * Delete return.
   * @param returnId Return ID   * @param orderId Defines the order id   * @param storeId Store Id
  */
  public void orderReturnDelete (String returnId, String orderId, String storeId, final Response.Listener<AttributeValueDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'returnId' is set
    if (returnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'returnId' when calling orderReturnDelete",
        new ApiException(400, "Missing the required parameter 'returnId' when calling orderReturnDelete"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderReturnDelete",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderReturnDelete"));
    }

    // create path and map variables
    String path = "/order.return.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "return_id", returnId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeValueDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeValueDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.return.update
  * Update order&#39;s shipment information.
   * @param orderReturnUpdate 
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response orderReturnUpdate (OrderReturnUpdate orderReturnUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = orderReturnUpdate;
    // verify the required parameter 'orderReturnUpdate' is set
    if (orderReturnUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderReturnUpdate' when calling orderReturnUpdate",
        new ApiException(400, "Missing the required parameter 'orderReturnUpdate' when calling orderReturnUpdate"));
    }

    // create path and map variables
    String path = "/order.return.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.return.update
   * Update order&#39;s shipment information.
   * @param orderReturnUpdate 
  */
  public void orderReturnUpdate (OrderReturnUpdate orderReturnUpdate, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = orderReturnUpdate;

    // verify the required parameter 'orderReturnUpdate' is set
    if (orderReturnUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderReturnUpdate' when calling orderReturnUpdate",
        new ApiException(400, "Missing the required parameter 'orderReturnUpdate' when calling orderReturnUpdate"));
    }

    // create path and map variables
    String path = "/order.return.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.shipment.add
  * Add a shipment to the order.
   * @param orderShipmentAdd 
   * @return OrderShipmentAdd200Response
  */
  public OrderShipmentAdd200Response orderShipmentAdd (OrderShipmentAdd orderShipmentAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = orderShipmentAdd;
    // verify the required parameter 'orderShipmentAdd' is set
    if (orderShipmentAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderShipmentAdd' when calling orderShipmentAdd",
        new ApiException(400, "Missing the required parameter 'orderShipmentAdd' when calling orderShipmentAdd"));
    }

    // create path and map variables
    String path = "/order.shipment.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderShipmentAdd200Response) ApiInvoker.deserialize(localVarResponse, "", OrderShipmentAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.shipment.add
   * Add a shipment to the order.
   * @param orderShipmentAdd 
  */
  public void orderShipmentAdd (OrderShipmentAdd orderShipmentAdd, final Response.Listener<OrderShipmentAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = orderShipmentAdd;

    // verify the required parameter 'orderShipmentAdd' is set
    if (orderShipmentAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderShipmentAdd' when calling orderShipmentAdd",
        new ApiException(400, "Missing the required parameter 'orderShipmentAdd' when calling orderShipmentAdd"));
    }

    // create path and map variables
    String path = "/order.shipment.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderShipmentAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderShipmentAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.shipment.add.batch
  * Add a shipments to the orders.
   * @param orderShipmentAddBatch 
   * @return CategoryAddBatch200Response
  */
  public CategoryAddBatch200Response orderShipmentAddBatch (OrderShipmentAddBatch orderShipmentAddBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = orderShipmentAddBatch;
    // verify the required parameter 'orderShipmentAddBatch' is set
    if (orderShipmentAddBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderShipmentAddBatch' when calling orderShipmentAddBatch",
        new ApiException(400, "Missing the required parameter 'orderShipmentAddBatch' when calling orderShipmentAddBatch"));
    }

    // create path and map variables
    String path = "/order.shipment.add.batch.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryAddBatch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.shipment.add.batch
   * Add a shipments to the orders.
   * @param orderShipmentAddBatch 
  */
  public void orderShipmentAddBatch (OrderShipmentAddBatch orderShipmentAddBatch, final Response.Listener<CategoryAddBatch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = orderShipmentAddBatch;

    // verify the required parameter 'orderShipmentAddBatch' is set
    if (orderShipmentAddBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderShipmentAddBatch' when calling orderShipmentAddBatch",
        new ApiException(400, "Missing the required parameter 'orderShipmentAddBatch' when calling orderShipmentAddBatch"));
    }

    // create path and map variables
    String path = "/order.shipment.add.batch.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryAddBatch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.shipment.delete
  * Delete order&#39;s shipment.
   * @param shipmentId Shipment id indicates the number of delivery
   * @param orderId Defines the order for which the shipment will be deleted
   * @param storeId Store Id
   * @return OrderShipmentDelete200Response
  */
  public OrderShipmentDelete200Response orderShipmentDelete (String shipmentId, String orderId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'shipmentId' is set
    if (shipmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shipmentId' when calling orderShipmentDelete",
        new ApiException(400, "Missing the required parameter 'shipmentId' when calling orderShipmentDelete"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderShipmentDelete",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderShipmentDelete"));
    }

    // create path and map variables
    String path = "/order.shipment.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "shipment_id", shipmentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderShipmentDelete200Response) ApiInvoker.deserialize(localVarResponse, "", OrderShipmentDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.shipment.delete
   * Delete order&#39;s shipment.
   * @param shipmentId Shipment id indicates the number of delivery   * @param orderId Defines the order for which the shipment will be deleted   * @param storeId Store Id
  */
  public void orderShipmentDelete (String shipmentId, String orderId, String storeId, final Response.Listener<OrderShipmentDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'shipmentId' is set
    if (shipmentId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'shipmentId' when calling orderShipmentDelete",
        new ApiException(400, "Missing the required parameter 'shipmentId' when calling orderShipmentDelete"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderShipmentDelete",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderShipmentDelete"));
    }

    // create path and map variables
    String path = "/order.shipment.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "shipment_id", shipmentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderShipmentDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderShipmentDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.shipment.info
  * Get information of shipment.
   * @param id Entity id
   * @param orderId Defines the order id
   * @param start This parameter sets the number from which you want to get entities
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param storeId Store Id
   * @return OrderShipmentInfo200Response
  */
  public OrderShipmentInfo200Response orderShipmentInfo (String id, String orderId, Integer start, String params, String responseFields, String exclude, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderShipmentInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling orderShipmentInfo"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderShipmentInfo",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderShipmentInfo"));
    }

    // create path and map variables
    String path = "/order.shipment.info.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderShipmentInfo200Response) ApiInvoker.deserialize(localVarResponse, "", OrderShipmentInfo200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.shipment.info
   * Get information of shipment.
   * @param id Entity id   * @param orderId Defines the order id   * @param start This parameter sets the number from which you want to get entities   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param storeId Store Id
  */
  public void orderShipmentInfo (String id, String orderId, Integer start, String params, String responseFields, String exclude, String storeId, final Response.Listener<OrderShipmentInfo200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling orderShipmentInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling orderShipmentInfo"));
    }
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderShipmentInfo",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderShipmentInfo"));
    }

    // create path and map variables
    String path = "/order.shipment.info.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderShipmentInfo200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderShipmentInfo200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.shipment.list
  * Get list of shipments by orders.
   * @param orderId Retrieves shipments specified by order id
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param storeId Store Id
   * @return ModelResponseOrderShipmentList
  */
  public ModelResponseOrderShipmentList orderShipmentList (String orderId, String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderShipmentList",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderShipmentList"));
    }

    // create path and map variables
    String path = "/order.shipment.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseOrderShipmentList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseOrderShipmentList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.shipment.list
   * Get list of shipments by orders.
   * @param orderId Retrieves shipments specified by order id   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param storeId Store Id
  */
  public void orderShipmentList (String orderId, String pageCursor, Integer start, Integer count, String params, String responseFields, String exclude, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String storeId, final Response.Listener<ModelResponseOrderShipmentList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderShipmentList",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderShipmentList"));
    }

    // create path and map variables
    String path = "/order.shipment.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseOrderShipmentList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseOrderShipmentList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.shipment.tracking.add
  * Add order shipment&#39;s tracking info.
   * @param orderShipmentTrackingAdd 
   * @return OrderShipmentTrackingAdd200Response
  */
  public OrderShipmentTrackingAdd200Response orderShipmentTrackingAdd (OrderShipmentTrackingAdd orderShipmentTrackingAdd) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = orderShipmentTrackingAdd;
    // verify the required parameter 'orderShipmentTrackingAdd' is set
    if (orderShipmentTrackingAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderShipmentTrackingAdd' when calling orderShipmentTrackingAdd",
        new ApiException(400, "Missing the required parameter 'orderShipmentTrackingAdd' when calling orderShipmentTrackingAdd"));
    }

    // create path and map variables
    String path = "/order.shipment.tracking.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (OrderShipmentTrackingAdd200Response) ApiInvoker.deserialize(localVarResponse, "", OrderShipmentTrackingAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.shipment.tracking.add
   * Add order shipment&#39;s tracking info.
   * @param orderShipmentTrackingAdd 
  */
  public void orderShipmentTrackingAdd (OrderShipmentTrackingAdd orderShipmentTrackingAdd, final Response.Listener<OrderShipmentTrackingAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = orderShipmentTrackingAdd;

    // verify the required parameter 'orderShipmentTrackingAdd' is set
    if (orderShipmentTrackingAdd == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderShipmentTrackingAdd' when calling orderShipmentTrackingAdd",
        new ApiException(400, "Missing the required parameter 'orderShipmentTrackingAdd' when calling orderShipmentTrackingAdd"));
    }

    // create path and map variables
    String path = "/order.shipment.tracking.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((OrderShipmentTrackingAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", OrderShipmentTrackingAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.shipment.update
  * Update order&#39;s shipment information.
   * @param orderShipmentUpdate 
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response orderShipmentUpdate (OrderShipmentUpdate orderShipmentUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = orderShipmentUpdate;
    // verify the required parameter 'orderShipmentUpdate' is set
    if (orderShipmentUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderShipmentUpdate' when calling orderShipmentUpdate",
        new ApiException(400, "Missing the required parameter 'orderShipmentUpdate' when calling orderShipmentUpdate"));
    }

    // create path and map variables
    String path = "/order.shipment.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.shipment.update
   * Update order&#39;s shipment information.
   * @param orderShipmentUpdate 
  */
  public void orderShipmentUpdate (OrderShipmentUpdate orderShipmentUpdate, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = orderShipmentUpdate;

    // verify the required parameter 'orderShipmentUpdate' is set
    if (orderShipmentUpdate == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderShipmentUpdate' when calling orderShipmentUpdate",
        new ApiException(400, "Missing the required parameter 'orderShipmentUpdate' when calling orderShipmentUpdate"));
    }

    // create path and map variables
    String path = "/order.shipment.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.status.list
  * Retrieve list of statuses
   * @param storeId Store Id
   * @param action Available statuses for the specified action.
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @return ModelResponseOrderStatusList
  */
  public ModelResponseOrderStatusList orderStatusList (String storeId, String action, String responseFields) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/order.status.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "action", action));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseOrderStatusList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseOrderStatusList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.status.list
   * Retrieve list of statuses
   * @param storeId Store Id   * @param action Available statuses for the specified action.   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
  */
  public void orderStatusList (String storeId, String action, String responseFields, final Response.Listener<ModelResponseOrderStatusList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/order.status.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "action", action));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseOrderStatusList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseOrderStatusList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.transaction.list
  * Retrieve list of order transaction
   * @param orderIds Retrieves order transactions specified by order ids
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param storeId Store Id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @return ModelResponseOrderTransactionList
  */
  public ModelResponseOrderTransactionList orderTransactionList (String orderIds, Integer count, String storeId, String params, String responseFields, String exclude, String pageCursor) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orderIds' is set
    if (orderIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderIds' when calling orderTransactionList",
        new ApiException(400, "Missing the required parameter 'orderIds' when calling orderTransactionList"));
    }

    // create path and map variables
    String path = "/order.transaction.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_ids", orderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseOrderTransactionList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseOrderTransactionList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.transaction.list
   * Retrieve list of order transaction
   * @param orderIds Retrieves order transactions specified by order ids   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param storeId Store Id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
  */
  public void orderTransactionList (String orderIds, Integer count, String storeId, String params, String responseFields, String exclude, String pageCursor, final Response.Listener<ModelResponseOrderTransactionList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orderIds' is set
    if (orderIds == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderIds' when calling orderTransactionList",
        new ApiException(400, "Missing the required parameter 'orderIds' when calling orderTransactionList"));
    }

    // create path and map variables
    String path = "/order.transaction.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_ids", orderIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseOrderTransactionList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseOrderTransactionList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * order.update
  * Update existing order.
   * @param orderId Defines the orders specified by order id
   * @param storeId Defines store id where the order should be found
   * @param orderStatus Defines new order&#39;s status
   * @param cancellationReason Defines the cancellation reason when the order will be canceled
   * @param comment Specifies order comment
   * @param adminComment Specifies admin&#39;s order comment
   * @param adminPrivateComment Specifies private admin&#39;s order comment
   * @param dateModified Specifies order&#39;s  modification date
   * @param dateFinished Specifies order&#39;s  finished date
   * @param financialStatus Update order financial status to specified
   * @param fulfillmentStatus Create order with fulfillment status
   * @param orderPaymentMethod Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39;
   * @param sendNotifications Send notifications to customer after order was created
   * @param origin The source of the order
   * @param createInvoice Determines whether an invoice should be created if it has not already been created
   * @param invoiceAdminComment Specifies admin&#39;s order invoice comment
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response orderUpdate (String orderId, String storeId, String orderStatus, String cancellationReason, String comment, String adminComment, String adminPrivateComment, String dateModified, String dateFinished, String financialStatus, String fulfillmentStatus, String orderPaymentMethod, Boolean sendNotifications, String origin, Boolean createInvoice, String invoiceAdminComment) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderUpdate"));
    }

    // create path and map variables
    String path = "/order.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_status", orderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cancellation_reason", cancellationReason));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "comment", comment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "admin_comment", adminComment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "admin_private_comment", adminPrivateComment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_modified", dateModified));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_finished", dateFinished));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "financial_status", financialStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_status", fulfillmentStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_payment_method", orderPaymentMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "send_notifications", sendNotifications));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "origin", origin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "create_invoice", createInvoice));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "invoice_admin_comment", invoiceAdminComment));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * order.update
   * Update existing order.
   * @param orderId Defines the orders specified by order id   * @param storeId Defines store id where the order should be found   * @param orderStatus Defines new order&#39;s status   * @param cancellationReason Defines the cancellation reason when the order will be canceled   * @param comment Specifies order comment   * @param adminComment Specifies admin&#39;s order comment   * @param adminPrivateComment Specifies private admin&#39;s order comment   * @param dateModified Specifies order&#39;s  modification date   * @param dateFinished Specifies order&#39;s  finished date   * @param financialStatus Update order financial status to specified   * @param fulfillmentStatus Create order with fulfillment status   * @param orderPaymentMethod Defines order payment method.&lt;br/&gt;Setting order_payment_method on Shopify will also change financial_status field value to &#39;paid&#39;   * @param sendNotifications Send notifications to customer after order was created   * @param origin The source of the order   * @param createInvoice Determines whether an invoice should be created if it has not already been created   * @param invoiceAdminComment Specifies admin&#39;s order invoice comment
  */
  public void orderUpdate (String orderId, String storeId, String orderStatus, String cancellationReason, String comment, String adminComment, String adminPrivateComment, String dateModified, String dateFinished, String financialStatus, String fulfillmentStatus, String orderPaymentMethod, Boolean sendNotifications, String origin, Boolean createInvoice, String invoiceAdminComment, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'orderId' is set
    if (orderId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'orderId' when calling orderUpdate",
        new ApiException(400, "Missing the required parameter 'orderId' when calling orderUpdate"));
    }

    // create path and map variables
    String path = "/order.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_id", orderId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_status", orderStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "cancellation_reason", cancellationReason));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "comment", comment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "admin_comment", adminComment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "admin_private_comment", adminPrivateComment));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_modified", dateModified));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "date_finished", dateFinished));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "financial_status", financialStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "fulfillment_status", fulfillmentStatus));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "order_payment_method", orderPaymentMethod));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "send_notifications", sendNotifications));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "origin", origin));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "create_invoice", createInvoice));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "invoice_admin_comment", invoiceAdminComment));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
