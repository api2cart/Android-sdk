/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.ModelResponseSubscriberList;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class SubscriberApi {
  String basePath = "https://api.api2cart.local.com/v1.1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * subscriber.list
  * Get subscribers list
   * @param ids Retrieves subscribers specified by ids
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param subscribed Filter by subscription status
   * @param storeId Store Id
   * @param email Filter subscribers by email
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @return ModelResponseSubscriberList
  */
  public ModelResponseSubscriberList subscriberList (String ids, Integer start, Integer count, String pageCursor, Boolean subscribed, String storeId, String email, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String responseFields, String params, String exclude) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/subscriber.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "subscribed", subscribed));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "email", email));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseSubscriberList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseSubscriberList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * subscriber.list
   * Get subscribers list
   * @param ids Retrieves subscribers specified by ids   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param subscribed Filter by subscription status   * @param storeId Store Id   * @param email Filter subscribers by email   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
  */
  public void subscriberList (String ids, Integer start, Integer count, String pageCursor, Boolean subscribed, String storeId, String email, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, String responseFields, String params, String exclude, final Response.Listener<ModelResponseSubscriberList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/subscriber.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "ids", ids));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "subscribed", subscribed));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "email", email));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseSubscriberList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseSubscriberList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
