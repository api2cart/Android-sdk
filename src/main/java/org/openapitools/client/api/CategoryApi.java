/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AccountConfigUpdate200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.CartConfigUpdate200Response;
import org.openapitools.client.model.CategoryAdd200Response;
import org.openapitools.client.model.CategoryAddBatch;
import org.openapitools.client.model.CategoryAddBatch200Response;
import org.openapitools.client.model.CategoryCount200Response;
import org.openapitools.client.model.CategoryDelete200Response;
import org.openapitools.client.model.CategoryFind200Response;
import org.openapitools.client.model.CategoryImageAdd200Response;
import org.openapitools.client.model.CategoryInfo200Response;
import org.openapitools.client.model.ModelResponseCategoryList;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class CategoryApi {
  String basePath = "https://api.api2cart.com/v1.1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * category.add
  * Add new category in store
   * @param name Defines category&#39;s name that has to be added
   * @param parentId Adds categories specified by parent id
   * @param storesIds Create category in the stores that is specified by comma-separated stores&#39; id
   * @param storeId Store Id
   * @param langId Language id
   * @param avail Defines category&#39;s visibility status
   * @param sortOrder Sort number in the list
   * @param createdTime Entity&#39;s date creation
   * @param modifiedTime Entity&#39;s date modification
   * @param description Defines category&#39;s description
   * @param shortDescription Defines short description
   * @param metaTitle Defines unique meta title for each entity
   * @param metaDescription Defines unique meta description of a entity
   * @param metaKeywords Defines unique meta keywords for each entity
   * @param seoUrl Defines unique category&#39;s URL for SEO
   * @return CategoryAdd200Response
  */
  public CategoryAdd200Response categoryAdd (String name, String parentId, String storesIds, String storeId, String langId, Boolean avail, Integer sortOrder, String createdTime, String modifiedTime, String description, String shortDescription, String metaTitle, String metaDescription, String metaKeywords, String seoUrl) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling categoryAdd",
        new ApiException(400, "Missing the required parameter 'name' when calling categoryAdd"));
    }

    // create path and map variables
    String path = "/category.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stores_ids", storesIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_time", createdTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_time", modifiedTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "short_description", shortDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_title", metaTitle));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_description", metaDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_keywords", metaKeywords));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "seo_url", seoUrl));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryAdd200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.add
   * Add new category in store
   * @param name Defines category&#39;s name that has to be added   * @param parentId Adds categories specified by parent id   * @param storesIds Create category in the stores that is specified by comma-separated stores&#39; id   * @param storeId Store Id   * @param langId Language id   * @param avail Defines category&#39;s visibility status   * @param sortOrder Sort number in the list   * @param createdTime Entity&#39;s date creation   * @param modifiedTime Entity&#39;s date modification   * @param description Defines category&#39;s description   * @param shortDescription Defines short description   * @param metaTitle Defines unique meta title for each entity   * @param metaDescription Defines unique meta description of a entity   * @param metaKeywords Defines unique meta keywords for each entity   * @param seoUrl Defines unique category&#39;s URL for SEO
  */
  public void categoryAdd (String name, String parentId, String storesIds, String storeId, String langId, Boolean avail, Integer sortOrder, String createdTime, String modifiedTime, String description, String shortDescription, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, final Response.Listener<CategoryAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling categoryAdd",
        new ApiException(400, "Missing the required parameter 'name' when calling categoryAdd"));
    }

    // create path and map variables
    String path = "/category.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stores_ids", storesIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_time", createdTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_time", modifiedTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "short_description", shortDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_title", metaTitle));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_description", metaDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_keywords", metaKeywords));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "seo_url", seoUrl));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.add.batch
  * Add new categories to the store.
   * @param categoryAddBatch 
   * @return CategoryAddBatch200Response
  */
  public CategoryAddBatch200Response categoryAddBatch (CategoryAddBatch categoryAddBatch) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = categoryAddBatch;
    // verify the required parameter 'categoryAddBatch' is set
    if (categoryAddBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryAddBatch' when calling categoryAddBatch",
        new ApiException(400, "Missing the required parameter 'categoryAddBatch' when calling categoryAddBatch"));
    }

    // create path and map variables
    String path = "/category.add.batch.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryAddBatch200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.add.batch
   * Add new categories to the store.
   * @param categoryAddBatch 
  */
  public void categoryAddBatch (CategoryAddBatch categoryAddBatch, final Response.Listener<CategoryAddBatch200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = categoryAddBatch;

    // verify the required parameter 'categoryAddBatch' is set
    if (categoryAddBatch == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryAddBatch' when calling categoryAddBatch",
        new ApiException(400, "Missing the required parameter 'categoryAddBatch' when calling categoryAddBatch"));
    }

    // create path and map variables
    String path = "/category.add.batch.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryAddBatch200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryAddBatch200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.assign
  * Assign category to product
   * @param productId Defines category assign to the product, specified by product id
   * @param categoryId Defines category assign, specified by category id
   * @param storeId Store Id
   * @return CartConfigUpdate200Response
  */
  public CartConfigUpdate200Response categoryAssign (String productId, String categoryId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling categoryAssign",
        new ApiException(400, "Missing the required parameter 'productId' when calling categoryAssign"));
    }
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling categoryAssign",
        new ApiException(400, "Missing the required parameter 'categoryId' when calling categoryAssign"));
    }

    // create path and map variables
    String path = "/category.assign.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CartConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", CartConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.assign
   * Assign category to product
   * @param productId Defines category assign to the product, specified by product id   * @param categoryId Defines category assign, specified by category id   * @param storeId Store Id
  */
  public void categoryAssign (String productId, String categoryId, String storeId, final Response.Listener<CartConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling categoryAssign",
        new ApiException(400, "Missing the required parameter 'productId' when calling categoryAssign"));
    }
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling categoryAssign",
        new ApiException(400, "Missing the required parameter 'categoryId' when calling categoryAssign"));
    }

    // create path and map variables
    String path = "/category.assign.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CartConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", CartConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.count
  * Count categories in store.
   * @param parentId Counts categories specified by parent id
   * @param storeId Counts category specified by store id
   * @param langId Counts category specified by language id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param avail Defines category&#39;s visibility status
   * @param productType A categorization for the product
   * @param findValue Entity search that is specified by some value
   * @param findWhere Counts categories that are searched specified by field
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   * @return CategoryCount200Response
  */
  public CategoryCount200Response categoryCount (String parentId, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, String productType, String findValue, String findWhere, String reportRequestId, Boolean disableReportCache) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/category.count.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_type", productType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryCount200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryCount200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.count
   * Count categories in store.
   * @param parentId Counts categories specified by parent id   * @param storeId Counts category specified by store id   * @param langId Counts category specified by language id   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param avail Defines category&#39;s visibility status   * @param productType A categorization for the product   * @param findValue Entity search that is specified by some value   * @param findWhere Counts categories that are searched specified by field   * @param reportRequestId Report request id   * @param disableReportCache Disable report cache for current request
  */
  public void categoryCount (String parentId, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, String productType, String findValue, String findWhere, String reportRequestId, Boolean disableReportCache, final Response.Listener<CategoryCount200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/category.count.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_type", productType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryCount200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryCount200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.delete
  * Delete category in store
   * @param id Defines category removal, specified by category id
   * @param storeId Store Id
   * @return CategoryDelete200Response
  */
  public CategoryDelete200Response categoryDelete (String id, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling categoryDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling categoryDelete"));
    }

    // create path and map variables
    String path = "/category.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryDelete200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.delete
   * Delete category in store
   * @param id Defines category removal, specified by category id   * @param storeId Store Id
  */
  public void categoryDelete (String id, String storeId, final Response.Listener<CategoryDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling categoryDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling categoryDelete"));
    }

    // create path and map variables
    String path = "/category.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.find
  * Search category in store. \&quot;Laptop\&quot; is specified here by default.
   * @param findValue Entity search that is specified by some value
   * @param findWhere Entity search that is specified by the comma-separated unique fields
   * @param findParams Entity search that is specified by comma-separated parameters
   * @param storeId Store Id
   * @param langId Language id
   * @return CategoryFind200Response
  */
  public CategoryFind200Response categoryFind (String findValue, String findWhere, String findParams, String storeId, String langId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'findValue' is set
    if (findValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'findValue' when calling categoryFind",
        new ApiException(400, "Missing the required parameter 'findValue' when calling categoryFind"));
    }

    // create path and map variables
    String path = "/category.find.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_params", findParams));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryFind200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryFind200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.find
   * Search category in store. \&quot;Laptop\&quot; is specified here by default.
   * @param findValue Entity search that is specified by some value   * @param findWhere Entity search that is specified by the comma-separated unique fields   * @param findParams Entity search that is specified by comma-separated parameters   * @param storeId Store Id   * @param langId Language id
  */
  public void categoryFind (String findValue, String findWhere, String findParams, String storeId, String langId, final Response.Listener<CategoryFind200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'findValue' is set
    if (findValue == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'findValue' when calling categoryFind",
        new ApiException(400, "Missing the required parameter 'findValue' when calling categoryFind"));
    }

    // create path and map variables
    String path = "/category.find.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_params", findParams));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryFind200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryFind200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.image.add
  * Add image to category
   * @param categoryId Defines category id where the image should be added
   * @param imageName Defines image&#39;s name
   * @param url Defines URL of the image that has to be added
   * @param type Defines image&#39;s types that are specified by comma-separated list
   * @param label Defines alternative text that has to be attached to the picture
   * @param mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.
   * @param position Defines image’s position in the list
   * @param storeId Store Id
   * @return CategoryImageAdd200Response
  */
  public CategoryImageAdd200Response categoryImageAdd (String categoryId, String imageName, String url, String type, String label, String mime, Integer position, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling categoryImageAdd",
        new ApiException(400, "Missing the required parameter 'categoryId' when calling categoryImageAdd"));
    }
    // verify the required parameter 'imageName' is set
    if (imageName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageName' when calling categoryImageAdd",
        new ApiException(400, "Missing the required parameter 'imageName' when calling categoryImageAdd"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling categoryImageAdd",
        new ApiException(400, "Missing the required parameter 'url' when calling categoryImageAdd"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling categoryImageAdd",
        new ApiException(400, "Missing the required parameter 'type' when calling categoryImageAdd"));
    }

    // create path and map variables
    String path = "/category.image.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "image_name", imageName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "label", label));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mime", mime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "position", position));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryImageAdd200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryImageAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.image.add
   * Add image to category
   * @param categoryId Defines category id where the image should be added   * @param imageName Defines image&#39;s name   * @param url Defines URL of the image that has to be added   * @param type Defines image&#39;s types that are specified by comma-separated list   * @param label Defines alternative text that has to be attached to the picture   * @param mime Mime type of image http://en.wikipedia.org/wiki/Internet_media_type.   * @param position Defines image’s position in the list   * @param storeId Store Id
  */
  public void categoryImageAdd (String categoryId, String imageName, String url, String type, String label, String mime, Integer position, String storeId, final Response.Listener<CategoryImageAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling categoryImageAdd",
        new ApiException(400, "Missing the required parameter 'categoryId' when calling categoryImageAdd"));
    }
    // verify the required parameter 'imageName' is set
    if (imageName == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageName' when calling categoryImageAdd",
        new ApiException(400, "Missing the required parameter 'imageName' when calling categoryImageAdd"));
    }
    // verify the required parameter 'url' is set
    if (url == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'url' when calling categoryImageAdd",
        new ApiException(400, "Missing the required parameter 'url' when calling categoryImageAdd"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling categoryImageAdd",
        new ApiException(400, "Missing the required parameter 'type' when calling categoryImageAdd"));
    }

    // create path and map variables
    String path = "/category.image.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "image_name", imageName));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "url", url));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "label", label));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "mime", mime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "position", position));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryImageAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryImageAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.image.delete
  * Delete image
   * @param categoryId Defines category id where the image should be deleted
   * @param imageId Define image id
   * @param storeId Store Id
   * @return AttributeDelete200Response
  */
  public AttributeDelete200Response categoryImageDelete (String categoryId, String imageId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling categoryImageDelete",
        new ApiException(400, "Missing the required parameter 'categoryId' when calling categoryImageDelete"));
    }
    // verify the required parameter 'imageId' is set
    if (imageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageId' when calling categoryImageDelete",
        new ApiException(400, "Missing the required parameter 'imageId' when calling categoryImageDelete"));
    }

    // create path and map variables
    String path = "/category.image.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "image_id", imageId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.image.delete
   * Delete image
   * @param categoryId Defines category id where the image should be deleted   * @param imageId Define image id   * @param storeId Store Id
  */
  public void categoryImageDelete (String categoryId, String imageId, String storeId, final Response.Listener<AttributeDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling categoryImageDelete",
        new ApiException(400, "Missing the required parameter 'categoryId' when calling categoryImageDelete"));
    }
    // verify the required parameter 'imageId' is set
    if (imageId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'imageId' when calling categoryImageDelete",
        new ApiException(400, "Missing the required parameter 'imageId' when calling categoryImageDelete"));
    }

    // create path and map variables
    String path = "/category.image.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "image_id", imageId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.info
  * Get category info about category ID*** or specify other category ID.
   * @param id Retrieves category&#39;s info specified by category id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param storeId Retrieves category info  specified by store id
   * @param langId Retrieves category info  specified by language id
   * @param schemaType The name of the requirements set for the provided schema.
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   * @return CategoryInfo200Response
  */
  public CategoryInfo200Response categoryInfo (String id, String params, String responseFields, String exclude, String storeId, String langId, String schemaType, String reportRequestId, Boolean disableReportCache) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling categoryInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling categoryInfo"));
    }

    // create path and map variables
    String path = "/category.info.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "schema_type", schemaType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CategoryInfo200Response) ApiInvoker.deserialize(localVarResponse, "", CategoryInfo200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.info
   * Get category info about category ID*** or specify other category ID.
   * @param id Retrieves category&#39;s info specified by category id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param storeId Retrieves category info  specified by store id   * @param langId Retrieves category info  specified by language id   * @param schemaType The name of the requirements set for the provided schema.   * @param reportRequestId Report request id   * @param disableReportCache Disable report cache for current request
  */
  public void categoryInfo (String id, String params, String responseFields, String exclude, String storeId, String langId, String schemaType, String reportRequestId, Boolean disableReportCache, final Response.Listener<CategoryInfo200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling categoryInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling categoryInfo"));
    }

    // create path and map variables
    String path = "/category.info.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "schema_type", schemaType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CategoryInfo200Response) ApiInvoker.deserialize(localVarResponse,  "", CategoryInfo200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.list
  * Get list of categories from store.
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)
   * @param parentId Retrieves categories specified by parent id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param storeId Retrieves categories specified by store id
   * @param langId Retrieves categorys specified by language id
   * @param createdFrom Retrieve entities from their creation date
   * @param createdTo Retrieve entities to their creation date
   * @param modifiedFrom Retrieve entities from their modification date
   * @param modifiedTo Retrieve entities to their modification date
   * @param avail Defines category&#39;s visibility status
   * @param productType A categorization for the product
   * @param findValue Entity search that is specified by some value
   * @param findWhere Category search that is specified by field
   * @param reportRequestId Report request id
   * @param disableReportCache Disable report cache for current request
   * @param disableCache Disable cache for current request
   * @return ModelResponseCategoryList
  */
  public ModelResponseCategoryList categoryList (Integer start, Integer count, String pageCursor, String parentId, String params, String responseFields, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, String productType, String findValue, String findWhere, String reportRequestId, Boolean disableReportCache, Boolean disableCache) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/category.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_type", productType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_cache", disableCache));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseCategoryList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseCategoryList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.list
   * Get list of categories from store.
   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param pageCursor Used to retrieve entities via cursor-based pagination (it can&#39;t be used with any other filtering parameter)   * @param parentId Retrieves categories specified by parent id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param storeId Retrieves categories specified by store id   * @param langId Retrieves categorys specified by language id   * @param createdFrom Retrieve entities from their creation date   * @param createdTo Retrieve entities to their creation date   * @param modifiedFrom Retrieve entities from their modification date   * @param modifiedTo Retrieve entities to their modification date   * @param avail Defines category&#39;s visibility status   * @param productType A categorization for the product   * @param findValue Entity search that is specified by some value   * @param findWhere Category search that is specified by field   * @param reportRequestId Report request id   * @param disableReportCache Disable report cache for current request   * @param disableCache Disable cache for current request
  */
  public void categoryList (Integer start, Integer count, String pageCursor, String parentId, String params, String responseFields, String exclude, String storeId, String langId, String createdFrom, String createdTo, String modifiedFrom, String modifiedTo, Boolean avail, String productType, String findValue, String findWhere, String reportRequestId, Boolean disableReportCache, Boolean disableCache, final Response.Listener<ModelResponseCategoryList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/category.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "page_cursor", pageCursor));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_from", createdFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "created_to", createdTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_from", modifiedFrom));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_to", modifiedTo));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_type", productType));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_value", findValue));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "find_where", findWhere));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "report_request_id", reportRequestId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_report_cache", disableReportCache));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "disable_cache", disableCache));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseCategoryList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseCategoryList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.unassign
  * Unassign category to product
   * @param categoryId Defines category unassign, specified by category id
   * @param productId Defines category unassign to the product, specified by product id
   * @param storeId Store Id
   * @return CartConfigUpdate200Response
  */
  public CartConfigUpdate200Response categoryUnassign (String categoryId, String productId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling categoryUnassign",
        new ApiException(400, "Missing the required parameter 'categoryId' when calling categoryUnassign"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling categoryUnassign",
        new ApiException(400, "Missing the required parameter 'productId' when calling categoryUnassign"));
    }

    // create path and map variables
    String path = "/category.unassign.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (CartConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", CartConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.unassign
   * Unassign category to product
   * @param categoryId Defines category unassign, specified by category id   * @param productId Defines category unassign to the product, specified by product id   * @param storeId Store Id
  */
  public void categoryUnassign (String categoryId, String productId, String storeId, final Response.Listener<CartConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'categoryId' is set
    if (categoryId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'categoryId' when calling categoryUnassign",
        new ApiException(400, "Missing the required parameter 'categoryId' when calling categoryUnassign"));
    }
    // verify the required parameter 'productId' is set
    if (productId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'productId' when calling categoryUnassign",
        new ApiException(400, "Missing the required parameter 'productId' when calling categoryUnassign"));
    }

    // create path and map variables
    String path = "/category.unassign.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "category_id", categoryId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "product_id", productId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((CartConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", CartConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * category.update
  * Update category in store
   * @param id Defines category update specified by category id
   * @param name Defines new category’s name
   * @param parentId Defines new parent category id
   * @param storesIds Update category in the stores that is specified by comma-separated stores&#39; id
   * @param avail Defines category&#39;s visibility status
   * @param sortOrder Sort number in the list
   * @param modifiedTime Entity&#39;s date modification
   * @param description Defines new category&#39;s description
   * @param shortDescription Defines short description
   * @param metaTitle Defines unique meta title for each entity
   * @param metaDescription Defines unique meta description of a entity
   * @param metaKeywords Defines unique meta keywords for each entity
   * @param seoUrl Defines unique category&#39;s URL for SEO
   * @param langId Language id
   * @param storeId Store Id
   * @return AccountConfigUpdate200Response
  */
  public AccountConfigUpdate200Response categoryUpdate (String id, String name, String parentId, String storesIds, Boolean avail, Integer sortOrder, String modifiedTime, String description, String shortDescription, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, String langId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling categoryUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling categoryUpdate"));
    }

    // create path and map variables
    String path = "/category.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stores_ids", storesIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_time", modifiedTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "short_description", shortDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_title", metaTitle));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_description", metaDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_keywords", metaKeywords));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "seo_url", seoUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AccountConfigUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * category.update
   * Update category in store
   * @param id Defines category update specified by category id   * @param name Defines new category’s name   * @param parentId Defines new parent category id   * @param storesIds Update category in the stores that is specified by comma-separated stores&#39; id   * @param avail Defines category&#39;s visibility status   * @param sortOrder Sort number in the list   * @param modifiedTime Entity&#39;s date modification   * @param description Defines new category&#39;s description   * @param shortDescription Defines short description   * @param metaTitle Defines unique meta title for each entity   * @param metaDescription Defines unique meta description of a entity   * @param metaKeywords Defines unique meta keywords for each entity   * @param seoUrl Defines unique category&#39;s URL for SEO   * @param langId Language id   * @param storeId Store Id
  */
  public void categoryUpdate (String id, String name, String parentId, String storesIds, Boolean avail, Integer sortOrder, String modifiedTime, String description, String shortDescription, String metaTitle, String metaDescription, String metaKeywords, String seoUrl, String langId, String storeId, final Response.Listener<AccountConfigUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling categoryUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling categoryUpdate"));
    }

    // create path and map variables
    String path = "/category.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "parent_id", parentId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "stores_ids", storesIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "avail", avail));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "sort_order", sortOrder));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "modified_time", modifiedTime));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "short_description", shortDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_title", metaTitle));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_description", metaDescription));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "meta_keywords", metaKeywords));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "seo_url", seoUrl));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AccountConfigUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AccountConfigUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
