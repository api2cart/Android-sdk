/**
 * API2Cart OpenAPI
 * API2Cart
 *
 * The version of the OpenAPI document: 1.1
 * Contact: contact@api2cart.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.AttributeAdd200Response;
import org.openapitools.client.model.AttributeAssignGroup200Response;
import org.openapitools.client.model.AttributeCount200Response;
import org.openapitools.client.model.AttributeDelete200Response;
import org.openapitools.client.model.AttributeInfo200Response;
import org.openapitools.client.model.AttributeTypeList200Response;
import org.openapitools.client.model.AttributeUnassignGroup200Response;
import org.openapitools.client.model.AttributeUpdate200Response;
import org.openapitools.client.model.AttributeValueDelete200Response;
import org.openapitools.client.model.ModelResponseAttributeAttributesetList;
import org.openapitools.client.model.ModelResponseAttributeGroupList;
import org.openapitools.client.model.ModelResponseAttributeList;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class AttributeApi {
  String basePath = "https://api.api2cart.com/v1.1";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * attribute.add
  * Add new attribute
   * @param type Defines attribute&#39;s type
   * @param name Defines attributes&#39;s name
   * @param code Entity code
   * @param storeId Store Id
   * @param langId Language id
   * @param visible Set visibility status
   * @param required Defines if the option is required
   * @param position Attribute&#x60;s position
   * @param attributeGroupId Filter by attribute_group_id
   * @param isGlobal Attribute saving scope
   * @param isSearchable Use attribute in Quick Search
   * @param isFilterable Use In Layered Navigation
   * @param isComparable Comparable on Front-end
   * @param isHtmlAllowedOnFront Allow HTML Tags on Frontend
   * @param isFilterableInSearch Use In Search Results Layered Navigation
   * @param isConfigurable Use To Create Configurable Product
   * @param isVisibleInAdvancedSearch Use in Advanced Search
   * @param isUsedForPromoRules Use for Promo Rule Conditions
   * @param usedInProductListing Used in Product Listing
   * @param usedForSortBy Used for Sorting in Product Listing
   * @param applyTo Types of products which can have this attribute
   * @return AttributeAdd200Response
  */
  public AttributeAdd200Response attributeAdd (String type, String name, String code, String storeId, String langId, Boolean visible, Boolean required, Integer position, String attributeGroupId, String isGlobal, Boolean isSearchable, String isFilterable, Boolean isComparable, Boolean isHtmlAllowedOnFront, Boolean isFilterableInSearch, Boolean isConfigurable, Boolean isVisibleInAdvancedSearch, Boolean isUsedForPromoRules, Boolean usedInProductListing, Boolean usedForSortBy, String applyTo) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling attributeAdd",
        new ApiException(400, "Missing the required parameter 'type' when calling attributeAdd"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling attributeAdd",
        new ApiException(400, "Missing the required parameter 'name' when calling attributeAdd"));
    }

    // create path and map variables
    String path = "/attribute.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "code", code));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "visible", visible));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "required", required));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "position", position));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_group_id", attributeGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_global", isGlobal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_searchable", isSearchable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_filterable", isFilterable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_comparable", isComparable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_html_allowed_on_front", isHtmlAllowedOnFront));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_filterable_in_search", isFilterableInSearch));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_configurable", isConfigurable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_visible_in_advanced_search", isVisibleInAdvancedSearch));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_used_for_promo_rules", isUsedForPromoRules));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "used_in_product_listing", usedInProductListing));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "used_for_sort_by", usedForSortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "apply_to", applyTo));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeAdd200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.add
   * Add new attribute
   * @param type Defines attribute&#39;s type   * @param name Defines attributes&#39;s name   * @param code Entity code   * @param storeId Store Id   * @param langId Language id   * @param visible Set visibility status   * @param required Defines if the option is required   * @param position Attribute&#x60;s position   * @param attributeGroupId Filter by attribute_group_id   * @param isGlobal Attribute saving scope   * @param isSearchable Use attribute in Quick Search   * @param isFilterable Use In Layered Navigation   * @param isComparable Comparable on Front-end   * @param isHtmlAllowedOnFront Allow HTML Tags on Frontend   * @param isFilterableInSearch Use In Search Results Layered Navigation   * @param isConfigurable Use To Create Configurable Product   * @param isVisibleInAdvancedSearch Use in Advanced Search   * @param isUsedForPromoRules Use for Promo Rule Conditions   * @param usedInProductListing Used in Product Listing   * @param usedForSortBy Used for Sorting in Product Listing   * @param applyTo Types of products which can have this attribute
  */
  public void attributeAdd (String type, String name, String code, String storeId, String langId, Boolean visible, Boolean required, Integer position, String attributeGroupId, String isGlobal, Boolean isSearchable, String isFilterable, Boolean isComparable, Boolean isHtmlAllowedOnFront, Boolean isFilterableInSearch, Boolean isConfigurable, Boolean isVisibleInAdvancedSearch, Boolean isUsedForPromoRules, Boolean usedInProductListing, Boolean usedForSortBy, String applyTo, final Response.Listener<AttributeAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling attributeAdd",
        new ApiException(400, "Missing the required parameter 'type' when calling attributeAdd"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling attributeAdd",
        new ApiException(400, "Missing the required parameter 'name' when calling attributeAdd"));
    }

    // create path and map variables
    String path = "/attribute.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "code", code));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "visible", visible));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "required", required));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "position", position));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_group_id", attributeGroupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_global", isGlobal));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_searchable", isSearchable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_filterable", isFilterable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_comparable", isComparable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_html_allowed_on_front", isHtmlAllowedOnFront));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_filterable_in_search", isFilterableInSearch));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_configurable", isConfigurable));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_visible_in_advanced_search", isVisibleInAdvancedSearch));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "is_used_for_promo_rules", isUsedForPromoRules));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "used_in_product_listing", usedInProductListing));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "used_for_sort_by", usedForSortBy));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "apply_to", applyTo));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.assign.group
  * Assign attribute to the group
   * @param id Entity id
   * @param groupId Attribute group_id
   * @param attributeSetId Attribute set id
   * @return AttributeAssignGroup200Response
  */
  public AttributeAssignGroup200Response attributeAssignGroup (String id, String groupId, String attributeSetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeAssignGroup",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeAssignGroup"));
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling attributeAssignGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling attributeAssignGroup"));
    }

    // create path and map variables
    String path = "/attribute.assign.group.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_id", groupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeAssignGroup200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeAssignGroup200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.assign.group
   * Assign attribute to the group
   * @param id Entity id   * @param groupId Attribute group_id   * @param attributeSetId Attribute set id
  */
  public void attributeAssignGroup (String id, String groupId, String attributeSetId, final Response.Listener<AttributeAssignGroup200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeAssignGroup",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeAssignGroup"));
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling attributeAssignGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling attributeAssignGroup"));
    }

    // create path and map variables
    String path = "/attribute.assign.group.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_id", groupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeAssignGroup200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeAssignGroup200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.assign.set
  * Assign attribute to the attribute set
   * @param id Entity id
   * @param attributeSetId Attribute set id
   * @param groupId Attribute group_id
   * @return AttributeAssignGroup200Response
  */
  public AttributeAssignGroup200Response attributeAssignSet (String id, String attributeSetId, String groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeAssignSet",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeAssignSet"));
    }
    // verify the required parameter 'attributeSetId' is set
    if (attributeSetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeSetId' when calling attributeAssignSet",
        new ApiException(400, "Missing the required parameter 'attributeSetId' when calling attributeAssignSet"));
    }

    // create path and map variables
    String path = "/attribute.assign.set.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_id", groupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeAssignGroup200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeAssignGroup200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.assign.set
   * Assign attribute to the attribute set
   * @param id Entity id   * @param attributeSetId Attribute set id   * @param groupId Attribute group_id
  */
  public void attributeAssignSet (String id, String attributeSetId, String groupId, final Response.Listener<AttributeAssignGroup200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeAssignSet",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeAssignSet"));
    }
    // verify the required parameter 'attributeSetId' is set
    if (attributeSetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeSetId' when calling attributeAssignSet",
        new ApiException(400, "Missing the required parameter 'attributeSetId' when calling attributeAssignSet"));
    }

    // create path and map variables
    String path = "/attribute.assign.set.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_id", groupId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeAssignGroup200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeAssignGroup200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.attributeset.list
  * Get attribute_set list
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @return ModelResponseAttributeAttributesetList
  */
  public ModelResponseAttributeAttributesetList attributeAttributesetList (Integer start, Integer count, String params, String exclude, String responseFields) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/attribute.attributeset.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseAttributeAttributesetList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseAttributeAttributesetList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.attributeset.list
   * Get attribute_set list
   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
  */
  public void attributeAttributesetList (Integer start, Integer count, String params, String exclude, String responseFields, final Response.Listener<ModelResponseAttributeAttributesetList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/attribute.attributeset.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseAttributeAttributesetList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseAttributeAttributesetList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.count
  * Get attributes count
   * @param type Defines attribute&#39;s type
   * @param attributeSetId Filter items by attribute set id
   * @param storeId Store Id
   * @param langId Language id
   * @param visible Filter items by visibility status
   * @param required Defines if the option is required
   * @param system True if attribute is system
   * @return AttributeCount200Response
  */
  public AttributeCount200Response attributeCount (String type, String attributeSetId, String storeId, String langId, Boolean visible, Boolean required, Boolean system) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/attribute.count.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "visible", visible));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "required", required));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "system", system));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeCount200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeCount200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.count
   * Get attributes count
   * @param type Defines attribute&#39;s type   * @param attributeSetId Filter items by attribute set id   * @param storeId Store Id   * @param langId Language id   * @param visible Filter items by visibility status   * @param required Defines if the option is required   * @param system True if attribute is system
  */
  public void attributeCount (String type, String attributeSetId, String storeId, String langId, Boolean visible, Boolean required, Boolean system, final Response.Listener<AttributeCount200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/attribute.count.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "visible", visible));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "required", required));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "system", system));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeCount200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeCount200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.delete
  * Delete attribute from store
   * @param id Entity id
   * @param storeId Store Id
   * @return AttributeDelete200Response
  */
  public AttributeDelete200Response attributeDelete (String id, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeDelete"));
    }

    // create path and map variables
    String path = "/attribute.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.delete
   * Delete attribute from store
   * @param id Entity id   * @param storeId Store Id
  */
  public void attributeDelete (String id, String storeId, final Response.Listener<AttributeDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeDelete"));
    }

    // create path and map variables
    String path = "/attribute.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.group.list
  * Get attribute group list
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param langId Language id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param attributeSetId Attribute set id
   * @return ModelResponseAttributeGroupList
  */
  public ModelResponseAttributeGroupList attributeGroupList (Integer start, Integer count, String langId, String params, String exclude, String responseFields, String attributeSetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/attribute.group.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseAttributeGroupList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseAttributeGroupList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.group.list
   * Get attribute group list
   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param langId Language id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param attributeSetId Attribute set id
  */
  public void attributeGroupList (Integer start, Integer count, String langId, String params, String exclude, String responseFields, String attributeSetId, final Response.Listener<ModelResponseAttributeGroupList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/attribute.group.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseAttributeGroupList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseAttributeGroupList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.info
  * Get information about a specific global attribute by its ID.
   * @param id Entity id
   * @param attributeSetId Attribute set id
   * @param storeId Store Id
   * @param langId Language id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @return AttributeInfo200Response
  */
  public AttributeInfo200Response attributeInfo (String id, String attributeSetId, String storeId, String langId, String params, String exclude, String responseFields) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeInfo"));
    }

    // create path and map variables
    String path = "/attribute.info.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeInfo200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeInfo200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.info
   * Get information about a specific global attribute by its ID.
   * @param id Entity id   * @param attributeSetId Attribute set id   * @param storeId Store Id   * @param langId Language id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
  */
  public void attributeInfo (String id, String attributeSetId, String storeId, String langId, String params, String exclude, String responseFields, final Response.Listener<AttributeInfo200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeInfo",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeInfo"));
    }

    // create path and map variables
    String path = "/attribute.info.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeInfo200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeInfo200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.list
  * Get a list of global attributes.
   * @param start This parameter sets the number from which you want to get entities
   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250
   * @param type Defines attribute&#39;s type
   * @param attributeIds Filter attributes by ids
   * @param attributeSetId Filter items by attribute set id
   * @param storeId Store Id
   * @param langId Retrieves attributes on specified language id
   * @param params Set this parameter in order to choose which entity fields you want to retrieve
   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all
   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve
   * @param visible Filter items by visibility status
   * @param required Defines if the option is required
   * @param system True if attribute is system
   * @return ModelResponseAttributeList
  */
  public ModelResponseAttributeList attributeList (Integer start, Integer count, String type, String attributeIds, String attributeSetId, String storeId, String langId, String params, String exclude, String responseFields, Boolean visible, Boolean required, Boolean system) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/attribute.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_ids", attributeIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "visible", visible));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "required", required));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "system", system));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (ModelResponseAttributeList) ApiInvoker.deserialize(localVarResponse, "", ModelResponseAttributeList.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.list
   * Get a list of global attributes.
   * @param start This parameter sets the number from which you want to get entities   * @param count This parameter sets the entity amount that has to be retrieved. Max allowed count&#x3D;250   * @param type Defines attribute&#39;s type   * @param attributeIds Filter attributes by ids   * @param attributeSetId Filter items by attribute set id   * @param storeId Store Id   * @param langId Retrieves attributes on specified language id   * @param params Set this parameter in order to choose which entity fields you want to retrieve   * @param exclude Set this parameter in order to choose which entity fields you want to ignore. Works only if parameter &#x60;params&#x60; equal force_all   * @param responseFields Set this parameter in order to choose which entity fields you want to retrieve   * @param visible Filter items by visibility status   * @param required Defines if the option is required   * @param system True if attribute is system
  */
  public void attributeList (Integer start, Integer count, String type, String attributeIds, String attributeSetId, String storeId, String langId, String params, String exclude, String responseFields, Boolean visible, Boolean required, Boolean system, final Response.Listener<ModelResponseAttributeList> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/attribute.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "start", start));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "count", count));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_ids", attributeIds));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "params", params));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "exclude", exclude));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "response_fields", responseFields));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "visible", visible));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "required", required));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "system", system));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((ModelResponseAttributeList) ApiInvoker.deserialize(localVarResponse,  "", ModelResponseAttributeList.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.type.list
  * Get list of supported attributes types
   * @return AttributeTypeList200Response
  */
  public AttributeTypeList200Response attributeTypeList () throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;

    // create path and map variables
    String path = "/attribute.type.list.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeTypeList200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeTypeList200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.type.list
   * Get list of supported attributes types

  */
  public void attributeTypeList (final Response.Listener<AttributeTypeList200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;


    // create path and map variables
    String path = "/attribute.type.list.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeTypeList200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeTypeList200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.unassign.group
  * Unassign attribute from group
   * @param id Entity id
   * @param groupId Customer group_id
   * @return AttributeUnassignGroup200Response
  */
  public AttributeUnassignGroup200Response attributeUnassignGroup (String id, String groupId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeUnassignGroup",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeUnassignGroup"));
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling attributeUnassignGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling attributeUnassignGroup"));
    }

    // create path and map variables
    String path = "/attribute.unassign.group.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_id", groupId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeUnassignGroup200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeUnassignGroup200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.unassign.group
   * Unassign attribute from group
   * @param id Entity id   * @param groupId Customer group_id
  */
  public void attributeUnassignGroup (String id, String groupId, final Response.Listener<AttributeUnassignGroup200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeUnassignGroup",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeUnassignGroup"));
    }
    // verify the required parameter 'groupId' is set
    if (groupId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'groupId' when calling attributeUnassignGroup",
        new ApiException(400, "Missing the required parameter 'groupId' when calling attributeUnassignGroup"));
    }

    // create path and map variables
    String path = "/attribute.unassign.group.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "group_id", groupId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeUnassignGroup200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeUnassignGroup200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.unassign.set
  * Unassign attribute from attribute set
   * @param id Entity id
   * @param attributeSetId Attribute set id
   * @return AttributeUnassignGroup200Response
  */
  public AttributeUnassignGroup200Response attributeUnassignSet (String id, String attributeSetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeUnassignSet",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeUnassignSet"));
    }
    // verify the required parameter 'attributeSetId' is set
    if (attributeSetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeSetId' when calling attributeUnassignSet",
        new ApiException(400, "Missing the required parameter 'attributeSetId' when calling attributeUnassignSet"));
    }

    // create path and map variables
    String path = "/attribute.unassign.set.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeUnassignGroup200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeUnassignGroup200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.unassign.set
   * Unassign attribute from attribute set
   * @param id Entity id   * @param attributeSetId Attribute set id
  */
  public void attributeUnassignSet (String id, String attributeSetId, final Response.Listener<AttributeUnassignGroup200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeUnassignSet",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeUnassignSet"));
    }
    // verify the required parameter 'attributeSetId' is set
    if (attributeSetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeSetId' when calling attributeUnassignSet",
        new ApiException(400, "Missing the required parameter 'attributeSetId' when calling attributeUnassignSet"));
    }

    // create path and map variables
    String path = "/attribute.unassign.set.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_set_id", attributeSetId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeUnassignGroup200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeUnassignGroup200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.update
  * Update attribute data
   * @param id Entity id
   * @param name Defines new attributes&#39;s name
   * @param storeId Store Id
   * @param langId Language id
   * @return AttributeUpdate200Response
  */
  public AttributeUpdate200Response attributeUpdate (String id, String name, String storeId, String langId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeUpdate"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling attributeUpdate",
        new ApiException(400, "Missing the required parameter 'name' when calling attributeUpdate"));
    }

    // create path and map variables
    String path = "/attribute.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.update
   * Update attribute data
   * @param id Entity id   * @param name Defines new attributes&#39;s name   * @param storeId Store Id   * @param langId Language id
  */
  public void attributeUpdate (String id, String name, String storeId, String langId, final Response.Listener<AttributeUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeUpdate"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling attributeUpdate",
        new ApiException(400, "Missing the required parameter 'name' when calling attributeUpdate"));
    }

    // create path and map variables
    String path = "/attribute.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.value.add
  * Add new value to attribute.
   * @param attributeId Attribute Id
   * @param name Defines attribute value&#39;s name
   * @param code Entity code
   * @param description Defines attribute value&#39;s description
   * @param storeId Store Id
   * @param langId Language id
   * @return AttributeAdd200Response
  */
  public AttributeAdd200Response attributeValueAdd (String attributeId, String name, String code, String description, String storeId, String langId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'attributeId' is set
    if (attributeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeId' when calling attributeValueAdd",
        new ApiException(400, "Missing the required parameter 'attributeId' when calling attributeValueAdd"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling attributeValueAdd",
        new ApiException(400, "Missing the required parameter 'name' when calling attributeValueAdd"));
    }

    // create path and map variables
    String path = "/attribute.value.add.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "code", code));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeAdd200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeAdd200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.value.add
   * Add new value to attribute.
   * @param attributeId Attribute Id   * @param name Defines attribute value&#39;s name   * @param code Entity code   * @param description Defines attribute value&#39;s description   * @param storeId Store Id   * @param langId Language id
  */
  public void attributeValueAdd (String attributeId, String name, String code, String description, String storeId, String langId, final Response.Listener<AttributeAdd200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'attributeId' is set
    if (attributeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeId' when calling attributeValueAdd",
        new ApiException(400, "Missing the required parameter 'attributeId' when calling attributeValueAdd"));
    }
    // verify the required parameter 'name' is set
    if (name == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'name' when calling attributeValueAdd",
        new ApiException(400, "Missing the required parameter 'name' when calling attributeValueAdd"));
    }

    // create path and map variables
    String path = "/attribute.value.add.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "code", code));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeAdd200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeAdd200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.value.delete
  * Delete attribute value.
   * @param id Entity id
   * @param attributeId Attribute Id
   * @param storeId Store Id
   * @return AttributeValueDelete200Response
  */
  public AttributeValueDelete200Response attributeValueDelete (String id, String attributeId, String storeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeValueDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeValueDelete"));
    }
    // verify the required parameter 'attributeId' is set
    if (attributeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeId' when calling attributeValueDelete",
        new ApiException(400, "Missing the required parameter 'attributeId' when calling attributeValueDelete"));
    }

    // create path and map variables
    String path = "/attribute.value.delete.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeValueDelete200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeValueDelete200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.value.delete
   * Delete attribute value.
   * @param id Entity id   * @param attributeId Attribute Id   * @param storeId Store Id
  */
  public void attributeValueDelete (String id, String attributeId, String storeId, final Response.Listener<AttributeValueDelete200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeValueDelete",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeValueDelete"));
    }
    // verify the required parameter 'attributeId' is set
    if (attributeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeId' when calling attributeValueDelete",
        new ApiException(400, "Missing the required parameter 'attributeId' when calling attributeValueDelete"));
    }

    // create path and map variables
    String path = "/attribute.value.delete.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeValueDelete200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeValueDelete200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * attribute.value.update
  * Update attribute value.
   * @param id Defines attribute value&#39;s id
   * @param attributeId Attribute Id
   * @param name Defines attribute value&#39;s name
   * @param description Defines new attribute value&#39;s description
   * @param code Entity code
   * @param storeId Store Id
   * @param langId Language id
   * @return AttributeUpdate200Response
  */
  public AttributeUpdate200Response attributeValueUpdate (String id, String attributeId, String name, String description, String code, String storeId, String langId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeValueUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeValueUpdate"));
    }
    // verify the required parameter 'attributeId' is set
    if (attributeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeId' when calling attributeValueUpdate",
        new ApiException(400, "Missing the required parameter 'attributeId' when calling attributeValueUpdate"));
    }

    // create path and map variables
    String path = "/attribute.value.update.json";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "code", code));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (AttributeUpdate200Response) ApiInvoker.deserialize(localVarResponse, "", AttributeUpdate200Response.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * attribute.value.update
   * Update attribute value.
   * @param id Defines attribute value&#39;s id   * @param attributeId Attribute Id   * @param name Defines attribute value&#39;s name   * @param description Defines new attribute value&#39;s description   * @param code Entity code   * @param storeId Store Id   * @param langId Language id
  */
  public void attributeValueUpdate (String id, String attributeId, String name, String description, String code, String storeId, String langId, final Response.Listener<AttributeUpdate200Response> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'id' is set
    if (id == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'id' when calling attributeValueUpdate",
        new ApiException(400, "Missing the required parameter 'id' when calling attributeValueUpdate"));
    }
    // verify the required parameter 'attributeId' is set
    if (attributeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'attributeId' when calling attributeValueUpdate",
        new ApiException(400, "Missing the required parameter 'attributeId' when calling attributeValueUpdate"));
    }

    // create path and map variables
    String path = "/attribute.value.update.json".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "id", id));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "attribute_id", attributeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "name", name));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "description", description));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "code", code));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "store_id", storeId));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "lang_id", langId));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "StoreKeyAuth", "ApiKeyAuth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((AttributeUpdate200Response) ApiInvoker.deserialize(localVarResponse,  "", AttributeUpdate200Response.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
